/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_NEPLIBS_H
#define _MOCK_NEPLIBS_H

#include "neplibs.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_neplibs_Init(void);
void mock_neplibs_Destroy(void);
void mock_neplibs_Verify(void);




#define vNeplibsUsDelay_Ignore() vNeplibsUsDelay_CMockIgnore()
void vNeplibsUsDelay_CMockIgnore(void);
#define vNeplibsUsDelay_ExpectAnyArgs() vNeplibsUsDelay_CMockExpectAnyArgs(__LINE__)
void vNeplibsUsDelay_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vNeplibsUsDelay_Expect(ulDelay) vNeplibsUsDelay_CMockExpect(__LINE__, ulDelay)
void vNeplibsUsDelay_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulDelay);
typedef void (* CMOCK_vNeplibsUsDelay_CALLBACK)(uint32_t ulDelay, int cmock_num_calls);
void vNeplibsUsDelay_StubWithCallback(CMOCK_vNeplibsUsDelay_CALLBACK Callback);
#define vNeplibsUsDelay_IgnoreArg_ulDelay() vNeplibsUsDelay_CMockIgnoreArg_ulDelay(__LINE__)
void vNeplibsUsDelay_CMockIgnoreArg_ulDelay(UNITY_LINE_TYPE cmock_line);
#define eNeplibsOpen_IgnoreAndReturn(cmock_retval) eNeplibsOpen_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsOpen_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsOpen_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsOpen_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsOpen_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsOpen_ExpectAndReturn(xStream, ulFlags, cmock_retval) eNeplibsOpen_CMockExpectAndReturn(__LINE__, xStream, ulFlags, cmock_retval)
void eNeplibsOpen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, const uint32_t ulFlags, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsOpen_CALLBACK)(handle_t xStream, const uint32_t ulFlags, int cmock_num_calls);
void eNeplibsOpen_StubWithCallback(CMOCK_eNeplibsOpen_CALLBACK Callback);
#define eNeplibsOpen_IgnoreArg_xStream() eNeplibsOpen_CMockIgnoreArg_xStream(__LINE__)
void eNeplibsOpen_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eNeplibsOpen_IgnoreArg_ulFlags() eNeplibsOpen_CMockIgnoreArg_ulFlags(__LINE__)
void eNeplibsOpen_CMockIgnoreArg_ulFlags(UNITY_LINE_TYPE cmock_line);
#define eNeplibsClose_IgnoreAndReturn(cmock_retval) eNeplibsClose_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsClose_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsClose_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsClose_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsClose_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsClose_ExpectAndReturn(xStream, cmock_retval) eNeplibsClose_CMockExpectAndReturn(__LINE__, xStream, cmock_retval)
void eNeplibsClose_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsClose_CALLBACK)(handle_t xStream, int cmock_num_calls);
void eNeplibsClose_StubWithCallback(CMOCK_eNeplibsClose_CALLBACK Callback);
#define eNeplibsClose_IgnoreArg_xStream() eNeplibsClose_CMockIgnoreArg_xStream(__LINE__)
void eNeplibsClose_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRead_IgnoreAndReturn(cmock_retval) eNeplibsRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsRead_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsRead_ExpectAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRead, cmock_retval) eNeplibsRead_CMockExpectAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRead, cmock_retval)
void eNeplibsRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, void* const pvBuffer, const size_t xBytes, size_t* pxBytesRead, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsRead_CALLBACK)(handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, void* const pvBuffer, const size_t xBytes, size_t* pxBytesRead, int cmock_num_calls);
void eNeplibsRead_StubWithCallback(CMOCK_eNeplibsRead_CALLBACK Callback);
#define eNeplibsRead_ExpectWithArrayAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, cmock_retval) eNeplibsRead_CMockExpectWithArrayAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, cmock_retval)
void eNeplibsRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, int pvAddrCmd_Depth, void* const pvBuffer, int pvBuffer_Depth, const size_t xBytes, size_t* pxBytesRead, int pxBytesRead_Depth, eNepError_t cmock_to_return);
#define eNeplibsRead_ReturnThruPtr_pvBuffer(pvBuffer) eNeplibsRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eNeplibsRead_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eNeplibsRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eNeplibsRead_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eNeplibsRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eNeplibsRead_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eNeplibsRead_ReturnThruPtr_pxBytesRead(pxBytesRead) eNeplibsRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, sizeof(*pxBytesRead))
#define eNeplibsRead_ReturnArrayThruPtr_pxBytesRead(pxBytesRead, cmock_len) eNeplibsRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, (int)(cmock_len * (int)sizeof(*pxBytesRead)))
#define eNeplibsRead_ReturnMemThruPtr_pxBytesRead(pxBytesRead, cmock_size) eNeplibsRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, cmock_size)
void eNeplibsRead_CMockReturnMemThruPtr_pxBytesRead(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRead, int cmock_size);
#define eNeplibsRead_IgnoreArg_xStream() eNeplibsRead_CMockIgnoreArg_xStream(__LINE__)
void eNeplibsRead_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRead_IgnoreArg_xAddrCmdSize() eNeplibsRead_CMockIgnoreArg_xAddrCmdSize(__LINE__)
void eNeplibsRead_CMockIgnoreArg_xAddrCmdSize(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRead_IgnoreArg_pvAddrCmd() eNeplibsRead_CMockIgnoreArg_pvAddrCmd(__LINE__)
void eNeplibsRead_CMockIgnoreArg_pvAddrCmd(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRead_IgnoreArg_pvBuffer() eNeplibsRead_CMockIgnoreArg_pvBuffer(__LINE__)
void eNeplibsRead_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRead_IgnoreArg_xBytes() eNeplibsRead_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsRead_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRead_IgnoreArg_pxBytesRead() eNeplibsRead_CMockIgnoreArg_pxBytesRead(__LINE__)
void eNeplibsRead_CMockIgnoreArg_pxBytesRead(UNITY_LINE_TYPE cmock_line);
#define eNeplibsWrite_IgnoreAndReturn(cmock_retval) eNeplibsWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsWrite_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsWrite_ExpectAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesWritten, cmock_retval) eNeplibsWrite_CMockExpectAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesWritten, cmock_retval)
void eNeplibsWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, const void* pvBuffer, const size_t xBytes, size_t* pxBytesWritten, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsWrite_CALLBACK)(handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, const void* pvBuffer, const size_t xBytes, size_t* pxBytesWritten, int cmock_num_calls);
void eNeplibsWrite_StubWithCallback(CMOCK_eNeplibsWrite_CALLBACK Callback);
#define eNeplibsWrite_ExpectWithArrayAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, cmock_retval) eNeplibsWrite_CMockExpectWithArrayAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, cmock_retval)
void eNeplibsWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, int pvAddrCmd_Depth, const void* pvBuffer, int pvBuffer_Depth, const size_t xBytes, size_t* pxBytesWritten, int pxBytesWritten_Depth, eNepError_t cmock_to_return);
#define eNeplibsWrite_ReturnThruPtr_pxBytesWritten(pxBytesWritten) eNeplibsWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, sizeof(*pxBytesWritten))
#define eNeplibsWrite_ReturnArrayThruPtr_pxBytesWritten(pxBytesWritten, cmock_len) eNeplibsWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, (int)(cmock_len * (int)sizeof(*pxBytesWritten)))
#define eNeplibsWrite_ReturnMemThruPtr_pxBytesWritten(pxBytesWritten, cmock_size) eNeplibsWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, cmock_size)
void eNeplibsWrite_CMockReturnMemThruPtr_pxBytesWritten(UNITY_LINE_TYPE cmock_line, size_t* pxBytesWritten, int cmock_size);
#define eNeplibsWrite_IgnoreArg_xStream() eNeplibsWrite_CMockIgnoreArg_xStream(__LINE__)
void eNeplibsWrite_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eNeplibsWrite_IgnoreArg_xAddrCmdSize() eNeplibsWrite_CMockIgnoreArg_xAddrCmdSize(__LINE__)
void eNeplibsWrite_CMockIgnoreArg_xAddrCmdSize(UNITY_LINE_TYPE cmock_line);
#define eNeplibsWrite_IgnoreArg_pvAddrCmd() eNeplibsWrite_CMockIgnoreArg_pvAddrCmd(__LINE__)
void eNeplibsWrite_CMockIgnoreArg_pvAddrCmd(UNITY_LINE_TYPE cmock_line);
#define eNeplibsWrite_IgnoreArg_pvBuffer() eNeplibsWrite_CMockIgnoreArg_pvBuffer(__LINE__)
void eNeplibsWrite_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eNeplibsWrite_IgnoreArg_xBytes() eNeplibsWrite_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsWrite_IgnoreArg_pxBytesWritten() eNeplibsWrite_CMockIgnoreArg_pxBytesWritten(__LINE__)
void eNeplibsWrite_CMockIgnoreArg_pxBytesWritten(UNITY_LINE_TYPE cmock_line);
#define eNeplibsIoCtl_IgnoreAndReturn(cmock_retval) eNeplibsIoCtl_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsIoCtl_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsIoCtl_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsIoCtl_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsIoCtl_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsIoCtl_ExpectAndReturn(xStream, ulRequest, pvValue, cmock_retval) eNeplibsIoCtl_CMockExpectAndReturn(__LINE__, xStream, ulRequest, pvValue, cmock_retval)
void eNeplibsIoCtl_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint32_t ulRequest, void* pvValue, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsIoCtl_CALLBACK)(handle_t xStream, uint32_t ulRequest, void* pvValue, int cmock_num_calls);
void eNeplibsIoCtl_StubWithCallback(CMOCK_eNeplibsIoCtl_CALLBACK Callback);
#define eNeplibsIoCtl_ExpectWithArrayAndReturn(xStream, ulRequest, pvValue, pvValue_Depth, cmock_retval) eNeplibsIoCtl_CMockExpectWithArrayAndReturn(__LINE__, xStream, ulRequest, pvValue, pvValue_Depth, cmock_retval)
void eNeplibsIoCtl_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint32_t ulRequest, void* pvValue, int pvValue_Depth, eNepError_t cmock_to_return);
#define eNeplibsIoCtl_ReturnThruPtr_pvValue(pvValue) eNeplibsIoCtl_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, sizeof(*pvValue))
#define eNeplibsIoCtl_ReturnArrayThruPtr_pvValue(pvValue, cmock_len) eNeplibsIoCtl_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, (int)(cmock_len * (int)sizeof(*pvValue)))
#define eNeplibsIoCtl_ReturnMemThruPtr_pvValue(pvValue, cmock_size) eNeplibsIoCtl_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, cmock_size)
void eNeplibsIoCtl_CMockReturnMemThruPtr_pvValue(UNITY_LINE_TYPE cmock_line, void* pvValue, int cmock_size);
#define eNeplibsIoCtl_IgnoreArg_xStream() eNeplibsIoCtl_CMockIgnoreArg_xStream(__LINE__)
void eNeplibsIoCtl_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eNeplibsIoCtl_IgnoreArg_ulRequest() eNeplibsIoCtl_CMockIgnoreArg_ulRequest(__LINE__)
void eNeplibsIoCtl_CMockIgnoreArg_ulRequest(UNITY_LINE_TYPE cmock_line);
#define eNeplibsIoCtl_IgnoreArg_pvValue() eNeplibsIoCtl_CMockIgnoreArg_pvValue(__LINE__)
void eNeplibsIoCtl_CMockIgnoreArg_pvValue(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreAndReturn(cmock_retval) eNeplibsI2CRequest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsI2CRequest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsI2CRequest_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsI2CRequest_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsI2CRequest_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsI2CRequest_ExpectAndReturn(eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRW, cmock_retval) eNeplibsI2CRequest_CMockExpectAndReturn(__LINE__, eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRW, cmock_retval)
void eNeplibsI2CRequest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void* pvAddrCmd, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsI2CRequest_CALLBACK)(eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void* pvAddrCmd, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, int cmock_num_calls);
void eNeplibsI2CRequest_StubWithCallback(CMOCK_eNeplibsI2CRequest_CALLBACK Callback);
#define eNeplibsI2CRequest_ExpectWithArrayAndReturn(eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval) eNeplibsI2CRequest_CMockExpectWithArrayAndReturn(__LINE__, eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval)
void eNeplibsI2CRequest_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void* pvAddrCmd, int pvAddrCmd_Depth, void* pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesRW, int pxBytesRW_Depth, eNepError_t cmock_to_return);
#define eNeplibsI2CRequest_ReturnThruPtr_pvBuffer(pvBuffer) eNeplibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eNeplibsI2CRequest_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eNeplibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eNeplibsI2CRequest_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eNeplibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eNeplibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eNeplibsI2CRequest_ReturnThruPtr_pxBytesRW(pxBytesRW) eNeplibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, sizeof(*pxBytesRW))
#define eNeplibsI2CRequest_ReturnArrayThruPtr_pxBytesRW(pxBytesRW, cmock_len) eNeplibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, (int)(cmock_len * (int)sizeof(*pxBytesRW)))
#define eNeplibsI2CRequest_ReturnMemThruPtr_pxBytesRW(pxBytesRW, cmock_size) eNeplibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, cmock_size)
void eNeplibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRW, int cmock_size);
#define eNeplibsI2CRequest_IgnoreArg_eAccess() eNeplibsI2CRequest_CMockIgnoreArg_eAccess(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_eAccess(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_xI2Cx() eNeplibsI2CRequest_CMockIgnoreArg_xI2Cx(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_xI2Cx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_ucDevAddr() eNeplibsI2CRequest_CMockIgnoreArg_ucDevAddr(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_ucDevAddr(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_xAddrCmdSize() eNeplibsI2CRequest_CMockIgnoreArg_xAddrCmdSize(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_xAddrCmdSize(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_pvAddrCmd() eNeplibsI2CRequest_CMockIgnoreArg_pvAddrCmd(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_pvAddrCmd(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_pvBuffer() eNeplibsI2CRequest_CMockIgnoreArg_pvBuffer(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_xBytes() eNeplibsI2CRequest_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsI2CRequest_IgnoreArg_pxBytesRW() eNeplibsI2CRequest_CMockIgnoreArg_pxBytesRW(__LINE__)
void eNeplibsI2CRequest_CMockIgnoreArg_pxBytesRW(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBytesReadWrite_IgnoreAndReturn(cmock_retval) eNeplibsSPIBytesReadWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsSPIBytesReadWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsSPIBytesReadWrite_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsSPIBytesReadWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsSPIBytesReadWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsSPIBytesReadWrite_ExpectAndReturn(xSPIx, pvBytesOut, pvBytesIn, xBytes, cmock_retval) eNeplibsSPIBytesReadWrite_CMockExpectAndReturn(__LINE__, xSPIx, pvBytesOut, pvBytesIn, xBytes, cmock_retval)
void eNeplibsSPIBytesReadWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xSPIx, void* const pvBytesOut, void* pvBytesIn, size_t xBytes, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsSPIBytesReadWrite_CALLBACK)(handle_t xSPIx, void* const pvBytesOut, void* pvBytesIn, size_t xBytes, int cmock_num_calls);
void eNeplibsSPIBytesReadWrite_StubWithCallback(CMOCK_eNeplibsSPIBytesReadWrite_CALLBACK Callback);
#define eNeplibsSPIBytesReadWrite_ExpectWithArrayAndReturn(xSPIx, pvBytesOut, pvBytesOut_Depth, pvBytesIn, pvBytesIn_Depth, xBytes, cmock_retval) eNeplibsSPIBytesReadWrite_CMockExpectWithArrayAndReturn(__LINE__, xSPIx, pvBytesOut, pvBytesOut_Depth, pvBytesIn, pvBytesIn_Depth, xBytes, cmock_retval)
void eNeplibsSPIBytesReadWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xSPIx, void* const pvBytesOut, int pvBytesOut_Depth, void* pvBytesIn, int pvBytesIn_Depth, size_t xBytes, eNepError_t cmock_to_return);
#define eNeplibsSPIBytesReadWrite_ReturnThruPtr_pvBytesOut(pvBytesOut) eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(__LINE__, pvBytesOut, sizeof(*pvBytesOut))
#define eNeplibsSPIBytesReadWrite_ReturnArrayThruPtr_pvBytesOut(pvBytesOut, cmock_len) eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(__LINE__, pvBytesOut, (int)(cmock_len * (int)sizeof(*pvBytesOut)))
#define eNeplibsSPIBytesReadWrite_ReturnMemThruPtr_pvBytesOut(pvBytesOut, cmock_size) eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(__LINE__, pvBytesOut, cmock_size)
void eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(UNITY_LINE_TYPE cmock_line, void* pvBytesOut, int cmock_size);
#define eNeplibsSPIBytesReadWrite_ReturnThruPtr_pvBytesIn(pvBytesIn) eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(__LINE__, pvBytesIn, sizeof(*pvBytesIn))
#define eNeplibsSPIBytesReadWrite_ReturnArrayThruPtr_pvBytesIn(pvBytesIn, cmock_len) eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(__LINE__, pvBytesIn, (int)(cmock_len * (int)sizeof(*pvBytesIn)))
#define eNeplibsSPIBytesReadWrite_ReturnMemThruPtr_pvBytesIn(pvBytesIn, cmock_size) eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(__LINE__, pvBytesIn, cmock_size)
void eNeplibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(UNITY_LINE_TYPE cmock_line, void* pvBytesIn, int cmock_size);
#define eNeplibsSPIBytesReadWrite_IgnoreArg_xSPIx() eNeplibsSPIBytesReadWrite_CMockIgnoreArg_xSPIx(__LINE__)
void eNeplibsSPIBytesReadWrite_CMockIgnoreArg_xSPIx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBytesReadWrite_IgnoreArg_pvBytesOut() eNeplibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesOut(__LINE__)
void eNeplibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesOut(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBytesReadWrite_IgnoreArg_pvBytesIn() eNeplibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesIn(__LINE__)
void eNeplibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesIn(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBytesReadWrite_IgnoreArg_xBytes() eNeplibsSPIBytesReadWrite_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsSPIBytesReadWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBlockReadWrite_IgnoreAndReturn(cmock_retval) eNeplibsSPIBlockReadWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsSPIBlockReadWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsSPIBlockReadWrite_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsSPIBlockReadWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsSPIBlockReadWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsSPIBlockReadWrite_ExpectAndReturn(eAccess, xSPIx, pvBuffer, xBytes, pxBytesRW, cmock_retval) eNeplibsSPIBlockReadWrite_CMockExpectAndReturn(__LINE__, eAccess, xSPIx, pvBuffer, xBytes, pxBytesRW, cmock_retval)
void eNeplibsSPIBlockReadWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xSPIx, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsSPIBlockReadWrite_CALLBACK)(eAccess_t eAccess, handle_t xSPIx, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, int cmock_num_calls);
void eNeplibsSPIBlockReadWrite_StubWithCallback(CMOCK_eNeplibsSPIBlockReadWrite_CALLBACK Callback);
#define eNeplibsSPIBlockReadWrite_ExpectWithArrayAndReturn(eAccess, xSPIx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval) eNeplibsSPIBlockReadWrite_CMockExpectWithArrayAndReturn(__LINE__, eAccess, xSPIx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval)
void eNeplibsSPIBlockReadWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xSPIx, void* pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesRW, int pxBytesRW_Depth, eNepError_t cmock_to_return);
#define eNeplibsSPIBlockReadWrite_ReturnThruPtr_pvBuffer(pvBuffer) eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eNeplibsSPIBlockReadWrite_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eNeplibsSPIBlockReadWrite_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eNeplibsSPIBlockReadWrite_ReturnThruPtr_pxBytesRW(pxBytesRW) eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, sizeof(*pxBytesRW))
#define eNeplibsSPIBlockReadWrite_ReturnArrayThruPtr_pxBytesRW(pxBytesRW, cmock_len) eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, (int)(cmock_len * (int)sizeof(*pxBytesRW)))
#define eNeplibsSPIBlockReadWrite_ReturnMemThruPtr_pxBytesRW(pxBytesRW, cmock_size) eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, cmock_size)
void eNeplibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRW, int cmock_size);
#define eNeplibsSPIBlockReadWrite_IgnoreArg_eAccess() eNeplibsSPIBlockReadWrite_CMockIgnoreArg_eAccess(__LINE__)
void eNeplibsSPIBlockReadWrite_CMockIgnoreArg_eAccess(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBlockReadWrite_IgnoreArg_xSPIx() eNeplibsSPIBlockReadWrite_CMockIgnoreArg_xSPIx(__LINE__)
void eNeplibsSPIBlockReadWrite_CMockIgnoreArg_xSPIx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBlockReadWrite_IgnoreArg_pvBuffer() eNeplibsSPIBlockReadWrite_CMockIgnoreArg_pvBuffer(__LINE__)
void eNeplibsSPIBlockReadWrite_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBlockReadWrite_IgnoreArg_xBytes() eNeplibsSPIBlockReadWrite_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsSPIBlockReadWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsSPIBlockReadWrite_IgnoreArg_pxBytesRW() eNeplibsSPIBlockReadWrite_CMockIgnoreArg_pxBytesRW(__LINE__)
void eNeplibsSPIBlockReadWrite_CMockIgnoreArg_pxBytesRW(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreAndReturn(cmock_retval) eNeplibsUartInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsUartInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsUartInit_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsUartInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsUartInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsUartInit_ExpectAndReturn(xUARTx, xGPIOx, ulPin, ulBaudRate, ucWordLength, ucStopBits, ucParity, xSilenceBits, xFrameTimeoutBits, cmock_retval) eNeplibsUartInit_CMockExpectAndReturn(__LINE__, xUARTx, xGPIOx, ulPin, ulBaudRate, ucWordLength, ucStopBits, ucParity, xSilenceBits, xFrameTimeoutBits, cmock_retval)
void eNeplibsUartInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, handle_t xGPIOx, uint32_t ulPin, uint32_t ulBaudRate, uint8_t ucWordLength, uint8_t ucStopBits, uint8_t ucParity, size_t xSilenceBits, size_t xFrameTimeoutBits, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsUartInit_CALLBACK)(handle_t xUARTx, handle_t xGPIOx, uint32_t ulPin, uint32_t ulBaudRate, uint8_t ucWordLength, uint8_t ucStopBits, uint8_t ucParity, size_t xSilenceBits, size_t xFrameTimeoutBits, int cmock_num_calls);
void eNeplibsUartInit_StubWithCallback(CMOCK_eNeplibsUartInit_CALLBACK Callback);
#define eNeplibsUartInit_IgnoreArg_xUARTx() eNeplibsUartInit_CMockIgnoreArg_xUARTx(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_xUARTx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_xGPIOx() eNeplibsUartInit_CMockIgnoreArg_xGPIOx(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_xGPIOx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_ulPin() eNeplibsUartInit_CMockIgnoreArg_ulPin(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_ulPin(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_ulBaudRate() eNeplibsUartInit_CMockIgnoreArg_ulBaudRate(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_ulBaudRate(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_ucWordLength() eNeplibsUartInit_CMockIgnoreArg_ucWordLength(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_ucWordLength(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_ucStopBits() eNeplibsUartInit_CMockIgnoreArg_ucStopBits(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_ucStopBits(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_ucParity() eNeplibsUartInit_CMockIgnoreArg_ucParity(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_ucParity(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_xSilenceBits() eNeplibsUartInit_CMockIgnoreArg_xSilenceBits(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_xSilenceBits(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartInit_IgnoreArg_xFrameTimeoutBits() eNeplibsUartInit_CMockIgnoreArg_xFrameTimeoutBits(__LINE__)
void eNeplibsUartInit_CMockIgnoreArg_xFrameTimeoutBits(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartRead_IgnoreAndReturn(cmock_retval) eNeplibsUartRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsUartRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsUartRead_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsUartRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsUartRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsUartRead_ExpectAndReturn(xUARTx, pvBuffer, xBytes, pxBytesRead, ulMsTimeout, cmock_retval) eNeplibsUartRead_CMockExpectAndReturn(__LINE__, xUARTx, pvBuffer, xBytes, pxBytesRead, ulMsTimeout, cmock_retval)
void eNeplibsUartRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, void* const pvBuffer, size_t xBytes, size_t* pxBytesRead, uint32_t ulMsTimeout, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsUartRead_CALLBACK)(handle_t xUARTx, void* const pvBuffer, size_t xBytes, size_t* pxBytesRead, uint32_t ulMsTimeout, int cmock_num_calls);
void eNeplibsUartRead_StubWithCallback(CMOCK_eNeplibsUartRead_CALLBACK Callback);
#define eNeplibsUartRead_ExpectWithArrayAndReturn(xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, ulMsTimeout, cmock_retval) eNeplibsUartRead_CMockExpectWithArrayAndReturn(__LINE__, xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, ulMsTimeout, cmock_retval)
void eNeplibsUartRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, void* const pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesRead, int pxBytesRead_Depth, uint32_t ulMsTimeout, eNepError_t cmock_to_return);
#define eNeplibsUartRead_ReturnThruPtr_pvBuffer(pvBuffer) eNeplibsUartRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eNeplibsUartRead_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eNeplibsUartRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eNeplibsUartRead_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eNeplibsUartRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eNeplibsUartRead_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eNeplibsUartRead_ReturnThruPtr_pxBytesRead(pxBytesRead) eNeplibsUartRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, sizeof(*pxBytesRead))
#define eNeplibsUartRead_ReturnArrayThruPtr_pxBytesRead(pxBytesRead, cmock_len) eNeplibsUartRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, (int)(cmock_len * (int)sizeof(*pxBytesRead)))
#define eNeplibsUartRead_ReturnMemThruPtr_pxBytesRead(pxBytesRead, cmock_size) eNeplibsUartRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, cmock_size)
void eNeplibsUartRead_CMockReturnMemThruPtr_pxBytesRead(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRead, int cmock_size);
#define eNeplibsUartRead_IgnoreArg_xUARTx() eNeplibsUartRead_CMockIgnoreArg_xUARTx(__LINE__)
void eNeplibsUartRead_CMockIgnoreArg_xUARTx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartRead_IgnoreArg_pvBuffer() eNeplibsUartRead_CMockIgnoreArg_pvBuffer(__LINE__)
void eNeplibsUartRead_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartRead_IgnoreArg_xBytes() eNeplibsUartRead_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsUartRead_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartRead_IgnoreArg_pxBytesRead() eNeplibsUartRead_CMockIgnoreArg_pxBytesRead(__LINE__)
void eNeplibsUartRead_CMockIgnoreArg_pxBytesRead(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartRead_IgnoreArg_ulMsTimeout() eNeplibsUartRead_CMockIgnoreArg_ulMsTimeout(__LINE__)
void eNeplibsUartRead_CMockIgnoreArg_ulMsTimeout(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartWrite_IgnoreAndReturn(cmock_retval) eNeplibsUartWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsUartWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsUartWrite_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsUartWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsUartWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsUartWrite_ExpectAndReturn(xUARTx, pvBuffer, xBytes, pxBytesWritten, ulMsTimeout, cmock_retval) eNeplibsUartWrite_CMockExpectAndReturn(__LINE__, xUARTx, pvBuffer, xBytes, pxBytesWritten, ulMsTimeout, cmock_retval)
void eNeplibsUartWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, const void* pvBuffer, size_t xBytes, size_t* pxBytesWritten, uint32_t ulMsTimeout, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsUartWrite_CALLBACK)(handle_t xUARTx, const void* pvBuffer, size_t xBytes, size_t* pxBytesWritten, uint32_t ulMsTimeout, int cmock_num_calls);
void eNeplibsUartWrite_StubWithCallback(CMOCK_eNeplibsUartWrite_CALLBACK Callback);
#define eNeplibsUartWrite_ExpectWithArrayAndReturn(xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, ulMsTimeout, cmock_retval) eNeplibsUartWrite_CMockExpectWithArrayAndReturn(__LINE__, xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, ulMsTimeout, cmock_retval)
void eNeplibsUartWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, const void* pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesWritten, int pxBytesWritten_Depth, uint32_t ulMsTimeout, eNepError_t cmock_to_return);
#define eNeplibsUartWrite_ReturnThruPtr_pxBytesWritten(pxBytesWritten) eNeplibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, sizeof(*pxBytesWritten))
#define eNeplibsUartWrite_ReturnArrayThruPtr_pxBytesWritten(pxBytesWritten, cmock_len) eNeplibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, (int)(cmock_len * (int)sizeof(*pxBytesWritten)))
#define eNeplibsUartWrite_ReturnMemThruPtr_pxBytesWritten(pxBytesWritten, cmock_size) eNeplibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, cmock_size)
void eNeplibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(UNITY_LINE_TYPE cmock_line, size_t* pxBytesWritten, int cmock_size);
#define eNeplibsUartWrite_IgnoreArg_xUARTx() eNeplibsUartWrite_CMockIgnoreArg_xUARTx(__LINE__)
void eNeplibsUartWrite_CMockIgnoreArg_xUARTx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartWrite_IgnoreArg_pvBuffer() eNeplibsUartWrite_CMockIgnoreArg_pvBuffer(__LINE__)
void eNeplibsUartWrite_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartWrite_IgnoreArg_xBytes() eNeplibsUartWrite_CMockIgnoreArg_xBytes(__LINE__)
void eNeplibsUartWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartWrite_IgnoreArg_pxBytesWritten() eNeplibsUartWrite_CMockIgnoreArg_pxBytesWritten(__LINE__)
void eNeplibsUartWrite_CMockIgnoreArg_pxBytesWritten(UNITY_LINE_TYPE cmock_line);
#define eNeplibsUartWrite_IgnoreArg_ulMsTimeout() eNeplibsUartWrite_CMockIgnoreArg_ulMsTimeout(__LINE__)
void eNeplibsUartWrite_CMockIgnoreArg_ulMsTimeout(UNITY_LINE_TYPE cmock_line);
#define eNeplibsPwrMonInit_IgnoreAndReturn(cmock_retval) eNeplibsPwrMonInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsPwrMonInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsPwrMonInit_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsPwrMonInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsPwrMonInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsPwrMonInit_ExpectAndReturn(cmock_retval) eNeplibsPwrMonInit_CMockExpectAndReturn(__LINE__, cmock_retval)
void eNeplibsPwrMonInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsPwrMonInit_CALLBACK)(int cmock_num_calls);
void eNeplibsPwrMonInit_StubWithCallback(CMOCK_eNeplibsPwrMonInit_CALLBACK Callback);
#define eNeplibsPwrMonWaitPwrUp_IgnoreAndReturn(cmock_retval) eNeplibsPwrMonWaitPwrUp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsPwrMonWaitPwrUp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsPwrMonWaitPwrUp_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsPwrMonWaitPwrUp_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsPwrMonWaitPwrUp_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsPwrMonWaitPwrUp_ExpectAndReturn(cmock_retval) eNeplibsPwrMonWaitPwrUp_CMockExpectAndReturn(__LINE__, cmock_retval)
void eNeplibsPwrMonWaitPwrUp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsPwrMonWaitPwrUp_CALLBACK)(int cmock_num_calls);
void eNeplibsPwrMonWaitPwrUp_StubWithCallback(CMOCK_eNeplibsPwrMonWaitPwrUp_CALLBACK Callback);
#define sNeplibsPwrMonIsLow_IgnoreAndReturn(cmock_retval) sNeplibsPwrMonIsLow_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sNeplibsPwrMonIsLow_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define sNeplibsPwrMonIsLow_ExpectAnyArgsAndReturn(cmock_retval) sNeplibsPwrMonIsLow_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void sNeplibsPwrMonIsLow_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define sNeplibsPwrMonIsLow_ExpectAndReturn(cmock_retval) sNeplibsPwrMonIsLow_CMockExpectAndReturn(__LINE__, cmock_retval)
void sNeplibsPwrMonIsLow_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_sNeplibsPwrMonIsLow_CALLBACK)(int cmock_num_calls);
void sNeplibsPwrMonIsLow_StubWithCallback(CMOCK_sNeplibsPwrMonIsLow_CALLBACK Callback);
#define eNeplibsAnalogReadRaw_IgnoreAndReturn(cmock_retval) eNeplibsAnalogReadRaw_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogReadRaw_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadRaw_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsAnalogReadRaw_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogReadRaw_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadRaw_ExpectAndReturn(xANALOGx, plReading, cmock_retval) eNeplibsAnalogReadRaw_CMockExpectAndReturn(__LINE__, xANALOGx, plReading, cmock_retval)
void eNeplibsAnalogReadRaw_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsAnalogReadRaw_CALLBACK)(handle_t xANALOGx, int32_t* plReading, int cmock_num_calls);
void eNeplibsAnalogReadRaw_StubWithCallback(CMOCK_eNeplibsAnalogReadRaw_CALLBACK Callback);
#define eNeplibsAnalogReadRaw_ExpectWithArrayAndReturn(xANALOGx, plReading, plReading_Depth, cmock_retval) eNeplibsAnalogReadRaw_CMockExpectWithArrayAndReturn(__LINE__, xANALOGx, plReading, plReading_Depth, cmock_retval)
void eNeplibsAnalogReadRaw_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, int plReading_Depth, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadRaw_ReturnThruPtr_plReading(plReading) eNeplibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(__LINE__, plReading, sizeof(*plReading))
#define eNeplibsAnalogReadRaw_ReturnArrayThruPtr_plReading(plReading, cmock_len) eNeplibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(__LINE__, plReading, (int)(cmock_len * (int)sizeof(*plReading)))
#define eNeplibsAnalogReadRaw_ReturnMemThruPtr_plReading(plReading, cmock_size) eNeplibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(__LINE__, plReading, cmock_size)
void eNeplibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(UNITY_LINE_TYPE cmock_line, int32_t* plReading, int cmock_size);
#define eNeplibsAnalogReadRaw_IgnoreArg_xANALOGx() eNeplibsAnalogReadRaw_CMockIgnoreArg_xANALOGx(__LINE__)
void eNeplibsAnalogReadRaw_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogReadRaw_IgnoreArg_plReading() eNeplibsAnalogReadRaw_CMockIgnoreArg_plReading(__LINE__)
void eNeplibsAnalogReadRaw_CMockIgnoreArg_plReading(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogReadmV_IgnoreAndReturn(cmock_retval) eNeplibsAnalogReadmV_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogReadmV_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadmV_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsAnalogReadmV_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogReadmV_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadmV_ExpectAndReturn(xANALOGx, plReading, cmock_retval) eNeplibsAnalogReadmV_CMockExpectAndReturn(__LINE__, xANALOGx, plReading, cmock_retval)
void eNeplibsAnalogReadmV_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsAnalogReadmV_CALLBACK)(handle_t xANALOGx, int32_t* plReading, int cmock_num_calls);
void eNeplibsAnalogReadmV_StubWithCallback(CMOCK_eNeplibsAnalogReadmV_CALLBACK Callback);
#define eNeplibsAnalogReadmV_ExpectWithArrayAndReturn(xANALOGx, plReading, plReading_Depth, cmock_retval) eNeplibsAnalogReadmV_CMockExpectWithArrayAndReturn(__LINE__, xANALOGx, plReading, plReading_Depth, cmock_retval)
void eNeplibsAnalogReadmV_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, int plReading_Depth, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadmV_ReturnThruPtr_plReading(plReading) eNeplibsAnalogReadmV_CMockReturnMemThruPtr_plReading(__LINE__, plReading, sizeof(*plReading))
#define eNeplibsAnalogReadmV_ReturnArrayThruPtr_plReading(plReading, cmock_len) eNeplibsAnalogReadmV_CMockReturnMemThruPtr_plReading(__LINE__, plReading, (int)(cmock_len * (int)sizeof(*plReading)))
#define eNeplibsAnalogReadmV_ReturnMemThruPtr_plReading(plReading, cmock_size) eNeplibsAnalogReadmV_CMockReturnMemThruPtr_plReading(__LINE__, plReading, cmock_size)
void eNeplibsAnalogReadmV_CMockReturnMemThruPtr_plReading(UNITY_LINE_TYPE cmock_line, int32_t* plReading, int cmock_size);
#define eNeplibsAnalogReadmV_IgnoreArg_xANALOGx() eNeplibsAnalogReadmV_CMockIgnoreArg_xANALOGx(__LINE__)
void eNeplibsAnalogReadmV_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogReadmV_IgnoreArg_plReading() eNeplibsAnalogReadmV_CMockIgnoreArg_plReading(__LINE__)
void eNeplibsAnalogReadmV_CMockIgnoreArg_plReading(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogReadRes_IgnoreAndReturn(cmock_retval) eNeplibsAnalogReadRes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogReadRes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadRes_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsAnalogReadRes_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogReadRes_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadRes_ExpectAndReturn(xANALOGx, lResolution, plReading, cmock_retval) eNeplibsAnalogReadRes_CMockExpectAndReturn(__LINE__, xANALOGx, lResolution, plReading, cmock_retval)
void eNeplibsAnalogReadRes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lResolution, int32_t* plReading, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsAnalogReadRes_CALLBACK)(handle_t xANALOGx, int32_t lResolution, int32_t* plReading, int cmock_num_calls);
void eNeplibsAnalogReadRes_StubWithCallback(CMOCK_eNeplibsAnalogReadRes_CALLBACK Callback);
#define eNeplibsAnalogReadRes_ExpectWithArrayAndReturn(xANALOGx, lResolution, plReading, plReading_Depth, cmock_retval) eNeplibsAnalogReadRes_CMockExpectWithArrayAndReturn(__LINE__, xANALOGx, lResolution, plReading, plReading_Depth, cmock_retval)
void eNeplibsAnalogReadRes_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lResolution, int32_t* plReading, int plReading_Depth, eNepError_t cmock_to_return);
#define eNeplibsAnalogReadRes_ReturnThruPtr_plReading(plReading) eNeplibsAnalogReadRes_CMockReturnMemThruPtr_plReading(__LINE__, plReading, sizeof(*plReading))
#define eNeplibsAnalogReadRes_ReturnArrayThruPtr_plReading(plReading, cmock_len) eNeplibsAnalogReadRes_CMockReturnMemThruPtr_plReading(__LINE__, plReading, (int)(cmock_len * (int)sizeof(*plReading)))
#define eNeplibsAnalogReadRes_ReturnMemThruPtr_plReading(plReading, cmock_size) eNeplibsAnalogReadRes_CMockReturnMemThruPtr_plReading(__LINE__, plReading, cmock_size)
void eNeplibsAnalogReadRes_CMockReturnMemThruPtr_plReading(UNITY_LINE_TYPE cmock_line, int32_t* plReading, int cmock_size);
#define eNeplibsAnalogReadRes_IgnoreArg_xANALOGx() eNeplibsAnalogReadRes_CMockIgnoreArg_xANALOGx(__LINE__)
void eNeplibsAnalogReadRes_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogReadRes_IgnoreArg_lResolution() eNeplibsAnalogReadRes_CMockIgnoreArg_lResolution(__LINE__)
void eNeplibsAnalogReadRes_CMockIgnoreArg_lResolution(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogReadRes_IgnoreArg_plReading() eNeplibsAnalogReadRes_CMockIgnoreArg_plReading(__LINE__)
void eNeplibsAnalogReadRes_CMockIgnoreArg_plReading(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWriteRaw_IgnoreAndReturn(cmock_retval) eNeplibsAnalogWriteRaw_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogWriteRaw_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogWriteRaw_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsAnalogWriteRaw_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogWriteRaw_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogWriteRaw_ExpectAndReturn(xANALOGx, lOutput, cmock_retval) eNeplibsAnalogWriteRaw_CMockExpectAndReturn(__LINE__, xANALOGx, lOutput, cmock_retval)
void eNeplibsAnalogWriteRaw_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lOutput, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsAnalogWriteRaw_CALLBACK)(handle_t xANALOGx, int32_t lOutput, int cmock_num_calls);
void eNeplibsAnalogWriteRaw_StubWithCallback(CMOCK_eNeplibsAnalogWriteRaw_CALLBACK Callback);
#define eNeplibsAnalogWriteRaw_IgnoreArg_xANALOGx() eNeplibsAnalogWriteRaw_CMockIgnoreArg_xANALOGx(__LINE__)
void eNeplibsAnalogWriteRaw_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWriteRaw_IgnoreArg_lOutput() eNeplibsAnalogWriteRaw_CMockIgnoreArg_lOutput(__LINE__)
void eNeplibsAnalogWriteRaw_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWritemV_IgnoreAndReturn(cmock_retval) eNeplibsAnalogWritemV_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogWritemV_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogWritemV_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsAnalogWritemV_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogWritemV_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogWritemV_ExpectAndReturn(xANALOGx, lOutput, cmock_retval) eNeplibsAnalogWritemV_CMockExpectAndReturn(__LINE__, xANALOGx, lOutput, cmock_retval)
void eNeplibsAnalogWritemV_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lOutput, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsAnalogWritemV_CALLBACK)(handle_t xANALOGx, int32_t lOutput, int cmock_num_calls);
void eNeplibsAnalogWritemV_StubWithCallback(CMOCK_eNeplibsAnalogWritemV_CALLBACK Callback);
#define eNeplibsAnalogWritemV_IgnoreArg_xANALOGx() eNeplibsAnalogWritemV_CMockIgnoreArg_xANALOGx(__LINE__)
void eNeplibsAnalogWritemV_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWritemV_IgnoreArg_lOutput() eNeplibsAnalogWritemV_CMockIgnoreArg_lOutput(__LINE__)
void eNeplibsAnalogWritemV_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWriteRes_IgnoreAndReturn(cmock_retval) eNeplibsAnalogWriteRes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogWriteRes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogWriteRes_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsAnalogWriteRes_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsAnalogWriteRes_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsAnalogWriteRes_ExpectAndReturn(xANALOGx, lResolution, lOutput, cmock_retval) eNeplibsAnalogWriteRes_CMockExpectAndReturn(__LINE__, xANALOGx, lResolution, lOutput, cmock_retval)
void eNeplibsAnalogWriteRes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lResolution, int32_t lOutput, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsAnalogWriteRes_CALLBACK)(handle_t xANALOGx, int32_t lResolution, int32_t lOutput, int cmock_num_calls);
void eNeplibsAnalogWriteRes_StubWithCallback(CMOCK_eNeplibsAnalogWriteRes_CALLBACK Callback);
#define eNeplibsAnalogWriteRes_IgnoreArg_xANALOGx() eNeplibsAnalogWriteRes_CMockIgnoreArg_xANALOGx(__LINE__)
void eNeplibsAnalogWriteRes_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWriteRes_IgnoreArg_lResolution() eNeplibsAnalogWriteRes_CMockIgnoreArg_lResolution(__LINE__)
void eNeplibsAnalogWriteRes_CMockIgnoreArg_lResolution(UNITY_LINE_TYPE cmock_line);
#define eNeplibsAnalogWriteRes_IgnoreArg_lOutput() eNeplibsAnalogWriteRes_CMockIgnoreArg_lOutput(__LINE__)
void eNeplibsAnalogWriteRes_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eNeplibsBinaryRead_IgnoreAndReturn(cmock_retval) eNeplibsBinaryRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsBinaryRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsBinaryRead_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsBinaryRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsBinaryRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsBinaryRead_ExpectAndReturn(xBINARYx, peState, cmock_retval) eNeplibsBinaryRead_CMockExpectAndReturn(__LINE__, xBINARYx, peState, cmock_retval)
void eNeplibsBinaryRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eBool_t* peState, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsBinaryRead_CALLBACK)(handle_t xBINARYx, eBool_t* peState, int cmock_num_calls);
void eNeplibsBinaryRead_StubWithCallback(CMOCK_eNeplibsBinaryRead_CALLBACK Callback);
#define eNeplibsBinaryRead_ExpectWithArrayAndReturn(xBINARYx, peState, peState_Depth, cmock_retval) eNeplibsBinaryRead_CMockExpectWithArrayAndReturn(__LINE__, xBINARYx, peState, peState_Depth, cmock_retval)
void eNeplibsBinaryRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eBool_t* peState, int peState_Depth, eNepError_t cmock_to_return);
#define eNeplibsBinaryRead_ReturnThruPtr_peState(peState) eNeplibsBinaryRead_CMockReturnMemThruPtr_peState(__LINE__, peState, sizeof(*peState))
#define eNeplibsBinaryRead_ReturnArrayThruPtr_peState(peState, cmock_len) eNeplibsBinaryRead_CMockReturnMemThruPtr_peState(__LINE__, peState, (int)(cmock_len * (int)sizeof(*peState)))
#define eNeplibsBinaryRead_ReturnMemThruPtr_peState(peState, cmock_size) eNeplibsBinaryRead_CMockReturnMemThruPtr_peState(__LINE__, peState, cmock_size)
void eNeplibsBinaryRead_CMockReturnMemThruPtr_peState(UNITY_LINE_TYPE cmock_line, eBool_t* peState, int cmock_size);
#define eNeplibsBinaryRead_IgnoreArg_xBINARYx() eNeplibsBinaryRead_CMockIgnoreArg_xBINARYx(__LINE__)
void eNeplibsBinaryRead_CMockIgnoreArg_xBINARYx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsBinaryRead_IgnoreArg_peState() eNeplibsBinaryRead_CMockIgnoreArg_peState(__LINE__)
void eNeplibsBinaryRead_CMockIgnoreArg_peState(UNITY_LINE_TYPE cmock_line);
#define eNeplibsBinaryWrite_IgnoreAndReturn(cmock_retval) eNeplibsBinaryWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsBinaryWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsBinaryWrite_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsBinaryWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsBinaryWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsBinaryWrite_ExpectAndReturn(xBINARYx, eState, cmock_retval) eNeplibsBinaryWrite_CMockExpectAndReturn(__LINE__, xBINARYx, eState, cmock_retval)
void eNeplibsBinaryWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eBool_t eState, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsBinaryWrite_CALLBACK)(handle_t xBINARYx, eBool_t eState, int cmock_num_calls);
void eNeplibsBinaryWrite_StubWithCallback(CMOCK_eNeplibsBinaryWrite_CALLBACK Callback);
#define eNeplibsBinaryWrite_IgnoreArg_xBINARYx() eNeplibsBinaryWrite_CMockIgnoreArg_xBINARYx(__LINE__)
void eNeplibsBinaryWrite_CMockIgnoreArg_xBINARYx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsBinaryWrite_IgnoreArg_eState() eNeplibsBinaryWrite_CMockIgnoreArg_eState(__LINE__)
void eNeplibsBinaryWrite_CMockIgnoreArg_eState(UNITY_LINE_TYPE cmock_line);
#define eNeplibsBinaryToggle_IgnoreAndReturn(cmock_retval) eNeplibsBinaryToggle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsBinaryToggle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsBinaryToggle_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsBinaryToggle_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsBinaryToggle_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsBinaryToggle_ExpectAndReturn(xBINARYx, cmock_retval) eNeplibsBinaryToggle_CMockExpectAndReturn(__LINE__, xBINARYx, cmock_retval)
void eNeplibsBinaryToggle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsBinaryToggle_CALLBACK)(handle_t xBINARYx, int cmock_num_calls);
void eNeplibsBinaryToggle_StubWithCallback(CMOCK_eNeplibsBinaryToggle_CALLBACK Callback);
#define eNeplibsBinaryToggle_IgnoreArg_xBINARYx() eNeplibsBinaryToggle_CMockIgnoreArg_xBINARYx(__LINE__)
void eNeplibsBinaryToggle_CMockIgnoreArg_xBINARYx(UNITY_LINE_TYPE cmock_line);
#define eNeplibsMalloc_IgnoreAndReturn(cmock_retval) eNeplibsMalloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsMalloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsMalloc_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsMalloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsMalloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsMalloc_ExpectAndReturn(ppvMemBlock, xSize, cmock_retval) eNeplibsMalloc_CMockExpectAndReturn(__LINE__, ppvMemBlock, xSize, cmock_retval)
void eNeplibsMalloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, size_t xSize, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsMalloc_CALLBACK)(void** ppvMemBlock, size_t xSize, int cmock_num_calls);
void eNeplibsMalloc_StubWithCallback(CMOCK_eNeplibsMalloc_CALLBACK Callback);
#define eNeplibsMalloc_ExpectWithArrayAndReturn(ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval) eNeplibsMalloc_CMockExpectWithArrayAndReturn(__LINE__, ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval)
void eNeplibsMalloc_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int ppvMemBlock_Depth, size_t xSize, eNepError_t cmock_to_return);
#define eNeplibsMalloc_ReturnThruPtr_ppvMemBlock(ppvMemBlock) eNeplibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, sizeof(*ppvMemBlock))
#define eNeplibsMalloc_ReturnArrayThruPtr_ppvMemBlock(ppvMemBlock, cmock_len) eNeplibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, (int)(cmock_len * (int)sizeof(*ppvMemBlock)))
#define eNeplibsMalloc_ReturnMemThruPtr_ppvMemBlock(ppvMemBlock, cmock_size) eNeplibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, cmock_size)
void eNeplibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int cmock_size);
#define eNeplibsMalloc_IgnoreArg_ppvMemBlock() eNeplibsMalloc_CMockIgnoreArg_ppvMemBlock(__LINE__)
void eNeplibsMalloc_CMockIgnoreArg_ppvMemBlock(UNITY_LINE_TYPE cmock_line);
#define eNeplibsMalloc_IgnoreArg_xSize() eNeplibsMalloc_CMockIgnoreArg_xSize(__LINE__)
void eNeplibsMalloc_CMockIgnoreArg_xSize(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRealloc_IgnoreAndReturn(cmock_retval) eNeplibsRealloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eNeplibsRealloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsRealloc_ExpectAnyArgsAndReturn(cmock_retval) eNeplibsRealloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eNeplibsRealloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eNepError_t cmock_to_return);
#define eNeplibsRealloc_ExpectAndReturn(ppvMemBlock, xSize, cmock_retval) eNeplibsRealloc_CMockExpectAndReturn(__LINE__, ppvMemBlock, xSize, cmock_retval)
void eNeplibsRealloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, size_t xSize, eNepError_t cmock_to_return);
typedef eNepError_t (* CMOCK_eNeplibsRealloc_CALLBACK)(void** ppvMemBlock, size_t xSize, int cmock_num_calls);
void eNeplibsRealloc_StubWithCallback(CMOCK_eNeplibsRealloc_CALLBACK Callback);
#define eNeplibsRealloc_ExpectWithArrayAndReturn(ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval) eNeplibsRealloc_CMockExpectWithArrayAndReturn(__LINE__, ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval)
void eNeplibsRealloc_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int ppvMemBlock_Depth, size_t xSize, eNepError_t cmock_to_return);
#define eNeplibsRealloc_ReturnThruPtr_ppvMemBlock(ppvMemBlock) eNeplibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, sizeof(*ppvMemBlock))
#define eNeplibsRealloc_ReturnArrayThruPtr_ppvMemBlock(ppvMemBlock, cmock_len) eNeplibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, (int)(cmock_len * (int)sizeof(*ppvMemBlock)))
#define eNeplibsRealloc_ReturnMemThruPtr_ppvMemBlock(ppvMemBlock, cmock_size) eNeplibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, cmock_size)
void eNeplibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int cmock_size);
#define eNeplibsRealloc_IgnoreArg_ppvMemBlock() eNeplibsRealloc_CMockIgnoreArg_ppvMemBlock(__LINE__)
void eNeplibsRealloc_CMockIgnoreArg_ppvMemBlock(UNITY_LINE_TYPE cmock_line);
#define eNeplibsRealloc_IgnoreArg_xSize() eNeplibsRealloc_CMockIgnoreArg_xSize(__LINE__)
void eNeplibsRealloc_CMockIgnoreArg_xSize(UNITY_LINE_TYPE cmock_line);
#define vNeplibsFree_Ignore() vNeplibsFree_CMockIgnore()
void vNeplibsFree_CMockIgnore(void);
#define vNeplibsFree_ExpectAnyArgs() vNeplibsFree_CMockExpectAnyArgs(__LINE__)
void vNeplibsFree_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vNeplibsFree_Expect(ppvMemBlock) vNeplibsFree_CMockExpect(__LINE__, ppvMemBlock)
void vNeplibsFree_CMockExpect(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock);
typedef void (* CMOCK_vNeplibsFree_CALLBACK)(void** ppvMemBlock, int cmock_num_calls);
void vNeplibsFree_StubWithCallback(CMOCK_vNeplibsFree_CALLBACK Callback);
#define vNeplibsFree_ExpectWithArray(ppvMemBlock, ppvMemBlock_Depth) vNeplibsFree_CMockExpectWithArray(__LINE__, ppvMemBlock, ppvMemBlock_Depth)
void vNeplibsFree_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int ppvMemBlock_Depth);
#define vNeplibsFree_ReturnThruPtr_ppvMemBlock(ppvMemBlock) vNeplibsFree_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, sizeof(*ppvMemBlock))
#define vNeplibsFree_ReturnArrayThruPtr_ppvMemBlock(ppvMemBlock, cmock_len) vNeplibsFree_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, (int)(cmock_len * (int)sizeof(*ppvMemBlock)))
#define vNeplibsFree_ReturnMemThruPtr_ppvMemBlock(ppvMemBlock, cmock_size) vNeplibsFree_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, cmock_size)
void vNeplibsFree_CMockReturnMemThruPtr_ppvMemBlock(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int cmock_size);
#define vNeplibsFree_IgnoreArg_ppvMemBlock() vNeplibsFree_CMockIgnoreArg_ppvMemBlock(__LINE__)
void vNeplibsFree_CMockIgnoreArg_ppvMemBlock(UNITY_LINE_TYPE cmock_line);
#define xNeplibsGetFreeHeapSize_IgnoreAndReturn(cmock_retval) xNeplibsGetFreeHeapSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xNeplibsGetFreeHeapSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xNeplibsGetFreeHeapSize_ExpectAnyArgsAndReturn(cmock_retval) xNeplibsGetFreeHeapSize_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xNeplibsGetFreeHeapSize_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xNeplibsGetFreeHeapSize_ExpectAndReturn(cmock_retval) xNeplibsGetFreeHeapSize_CMockExpectAndReturn(__LINE__, cmock_retval)
void xNeplibsGetFreeHeapSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
typedef size_t (* CMOCK_xNeplibsGetFreeHeapSize_CALLBACK)(int cmock_num_calls);
void xNeplibsGetFreeHeapSize_StubWithCallback(CMOCK_xNeplibsGetFreeHeapSize_CALLBACK Callback);
#define xNeplibsGetMinEverFreeHeapSize_IgnoreAndReturn(cmock_retval) xNeplibsGetMinEverFreeHeapSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xNeplibsGetMinEverFreeHeapSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xNeplibsGetMinEverFreeHeapSize_ExpectAnyArgsAndReturn(cmock_retval) xNeplibsGetMinEverFreeHeapSize_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xNeplibsGetMinEverFreeHeapSize_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xNeplibsGetMinEverFreeHeapSize_ExpectAndReturn(cmock_retval) xNeplibsGetMinEverFreeHeapSize_CMockExpectAndReturn(__LINE__, cmock_retval)
void xNeplibsGetMinEverFreeHeapSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
typedef size_t (* CMOCK_xNeplibsGetMinEverFreeHeapSize_CALLBACK)(int cmock_num_calls);
void xNeplibsGetMinEverFreeHeapSize_StubWithCallback(CMOCK_xNeplibsGetMinEverFreeHeapSize_CALLBACK Callback);
#define pvNeplibsHeapPtr_IgnoreAndReturn(cmock_retval) pvNeplibsHeapPtr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pvNeplibsHeapPtr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvNeplibsHeapPtr_ExpectAnyArgsAndReturn(cmock_retval) pvNeplibsHeapPtr_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pvNeplibsHeapPtr_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvNeplibsHeapPtr_ExpectAndReturn(cmock_retval) pvNeplibsHeapPtr_CMockExpectAndReturn(__LINE__, cmock_retval)
void pvNeplibsHeapPtr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
typedef void* (* CMOCK_pvNeplibsHeapPtr_CALLBACK)(int cmock_num_calls);
void pvNeplibsHeapPtr_StubWithCallback(CMOCK_pvNeplibsHeapPtr_CALLBACK Callback);
#define vNeplibsMallocFailedHook_Ignore() vNeplibsMallocFailedHook_CMockIgnore()
void vNeplibsMallocFailedHook_CMockIgnore(void);
#define vNeplibsMallocFailedHook_ExpectAnyArgs() vNeplibsMallocFailedHook_CMockExpectAnyArgs(__LINE__)
void vNeplibsMallocFailedHook_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vNeplibsMallocFailedHook_Expect(xSizeRequired) vNeplibsMallocFailedHook_CMockExpect(__LINE__, xSizeRequired)
void vNeplibsMallocFailedHook_CMockExpect(UNITY_LINE_TYPE cmock_line, size_t xSizeRequired);
typedef void (* CMOCK_vNeplibsMallocFailedHook_CALLBACK)(size_t xSizeRequired, int cmock_num_calls);
void vNeplibsMallocFailedHook_StubWithCallback(CMOCK_vNeplibsMallocFailedHook_CALLBACK Callback);
#define vNeplibsMallocFailedHook_IgnoreArg_xSizeRequired() vNeplibsMallocFailedHook_CMockIgnoreArg_xSizeRequired(__LINE__)
void vNeplibsMallocFailedHook_CMockIgnoreArg_xSizeRequired(UNITY_LINE_TYPE cmock_line);
#define vNeplibsAssertFailed_Ignore() vNeplibsAssertFailed_CMockIgnore()
void vNeplibsAssertFailed_CMockIgnore(void);
#define vNeplibsAssertFailed_ExpectAnyArgs() vNeplibsAssertFailed_CMockExpectAnyArgs(__LINE__)
void vNeplibsAssertFailed_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vNeplibsAssertFailed_Expect(func, file, line) vNeplibsAssertFailed_CMockExpect(__LINE__, func, file, line)
void vNeplibsAssertFailed_CMockExpect(UNITY_LINE_TYPE cmock_line, char const* func, char const* file, int line);
typedef void (* CMOCK_vNeplibsAssertFailed_CALLBACK)(char const* func, char const* file, int line, int cmock_num_calls);
void vNeplibsAssertFailed_StubWithCallback(CMOCK_vNeplibsAssertFailed_CALLBACK Callback);
#define vNeplibsAssertFailed_IgnoreArg_func() vNeplibsAssertFailed_CMockIgnoreArg_func(__LINE__)
void vNeplibsAssertFailed_CMockIgnoreArg_func(UNITY_LINE_TYPE cmock_line);
#define vNeplibsAssertFailed_IgnoreArg_file() vNeplibsAssertFailed_CMockIgnoreArg_file(__LINE__)
void vNeplibsAssertFailed_CMockIgnoreArg_file(UNITY_LINE_TYPE cmock_line);
#define vNeplibsAssertFailed_IgnoreArg_line() vNeplibsAssertFailed_CMockIgnoreArg_line(__LINE__)
void vNeplibsAssertFailed_CMockIgnoreArg_line(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
