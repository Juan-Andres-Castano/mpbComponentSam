/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MPBLIBS_H
#define _MOCK_MPBLIBS_H

#include "mpblibs.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_mpblibs_Init(void);
void mock_mpblibs_Destroy(void);
void mock_mpblibs_Verify(void);




#define vMpblibsUsDelay_Ignore() vMpblibsUsDelay_CMockIgnore()
void vMpblibsUsDelay_CMockIgnore(void);
#define vMpblibsUsDelay_ExpectAnyArgs() vMpblibsUsDelay_CMockExpectAnyArgs(__LINE__)
void vMpblibsUsDelay_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpblibsUsDelay_Expect(ulDelay) vMpblibsUsDelay_CMockExpect(__LINE__, ulDelay)
void vMpblibsUsDelay_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulDelay);
typedef void (* CMOCK_vMpblibsUsDelay_CALLBACK)(uint32_t ulDelay, int cmock_num_calls);
void vMpblibsUsDelay_StubWithCallback(CMOCK_vMpblibsUsDelay_CALLBACK Callback);
#define vMpblibsUsDelay_IgnoreArg_ulDelay() vMpblibsUsDelay_CMockIgnoreArg_ulDelay(__LINE__)
void vMpblibsUsDelay_CMockIgnoreArg_ulDelay(UNITY_LINE_TYPE cmock_line);
#define eMpblibsOpen_IgnoreAndReturn(cmock_retval) eMpblibsOpen_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsOpen_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsOpen_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsOpen_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsOpen_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsOpen_ExpectAndReturn(xStream, ulFlags, cmock_retval) eMpblibsOpen_CMockExpectAndReturn(__LINE__, xStream, ulFlags, cmock_retval)
void eMpblibsOpen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, const uint32_t ulFlags, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsOpen_CALLBACK)(handle_t xStream, const uint32_t ulFlags, int cmock_num_calls);
void eMpblibsOpen_StubWithCallback(CMOCK_eMpblibsOpen_CALLBACK Callback);
#define eMpblibsOpen_IgnoreArg_xStream() eMpblibsOpen_CMockIgnoreArg_xStream(__LINE__)
void eMpblibsOpen_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eMpblibsOpen_IgnoreArg_ulFlags() eMpblibsOpen_CMockIgnoreArg_ulFlags(__LINE__)
void eMpblibsOpen_CMockIgnoreArg_ulFlags(UNITY_LINE_TYPE cmock_line);
#define eMpblibsClose_IgnoreAndReturn(cmock_retval) eMpblibsClose_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsClose_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsClose_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsClose_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsClose_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsClose_ExpectAndReturn(xStream, cmock_retval) eMpblibsClose_CMockExpectAndReturn(__LINE__, xStream, cmock_retval)
void eMpblibsClose_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsClose_CALLBACK)(handle_t xStream, int cmock_num_calls);
void eMpblibsClose_StubWithCallback(CMOCK_eMpblibsClose_CALLBACK Callback);
#define eMpblibsClose_IgnoreArg_xStream() eMpblibsClose_CMockIgnoreArg_xStream(__LINE__)
void eMpblibsClose_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRead_IgnoreAndReturn(cmock_retval) eMpblibsRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsRead_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsRead_ExpectAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRead, cmock_retval) eMpblibsRead_CMockExpectAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRead, cmock_retval)
void eMpblibsRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, void* const pvBuffer, const size_t xBytes, size_t* pxBytesRead, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsRead_CALLBACK)(handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, void* const pvBuffer, const size_t xBytes, size_t* pxBytesRead, int cmock_num_calls);
void eMpblibsRead_StubWithCallback(CMOCK_eMpblibsRead_CALLBACK Callback);
#define eMpblibsRead_ExpectWithArrayAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, cmock_retval) eMpblibsRead_CMockExpectWithArrayAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, cmock_retval)
void eMpblibsRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, int pvAddrCmd_Depth, void* const pvBuffer, int pvBuffer_Depth, const size_t xBytes, size_t* pxBytesRead, int pxBytesRead_Depth, eMpbError_t cmock_to_return);
#define eMpblibsRead_ReturnThruPtr_pvBuffer(pvBuffer) eMpblibsRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eMpblibsRead_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eMpblibsRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eMpblibsRead_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eMpblibsRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eMpblibsRead_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eMpblibsRead_ReturnThruPtr_pxBytesRead(pxBytesRead) eMpblibsRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, sizeof(*pxBytesRead))
#define eMpblibsRead_ReturnArrayThruPtr_pxBytesRead(pxBytesRead, cmock_len) eMpblibsRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, (int)(cmock_len * (int)sizeof(*pxBytesRead)))
#define eMpblibsRead_ReturnMemThruPtr_pxBytesRead(pxBytesRead, cmock_size) eMpblibsRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, cmock_size)
void eMpblibsRead_CMockReturnMemThruPtr_pxBytesRead(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRead, int cmock_size);
#define eMpblibsRead_IgnoreArg_xStream() eMpblibsRead_CMockIgnoreArg_xStream(__LINE__)
void eMpblibsRead_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRead_IgnoreArg_xAddrCmdSize() eMpblibsRead_CMockIgnoreArg_xAddrCmdSize(__LINE__)
void eMpblibsRead_CMockIgnoreArg_xAddrCmdSize(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRead_IgnoreArg_pvAddrCmd() eMpblibsRead_CMockIgnoreArg_pvAddrCmd(__LINE__)
void eMpblibsRead_CMockIgnoreArg_pvAddrCmd(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRead_IgnoreArg_pvBuffer() eMpblibsRead_CMockIgnoreArg_pvBuffer(__LINE__)
void eMpblibsRead_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRead_IgnoreArg_xBytes() eMpblibsRead_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsRead_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRead_IgnoreArg_pxBytesRead() eMpblibsRead_CMockIgnoreArg_pxBytesRead(__LINE__)
void eMpblibsRead_CMockIgnoreArg_pxBytesRead(UNITY_LINE_TYPE cmock_line);
#define eMpblibsWrite_IgnoreAndReturn(cmock_retval) eMpblibsWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsWrite_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsWrite_ExpectAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesWritten, cmock_retval) eMpblibsWrite_CMockExpectAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesWritten, cmock_retval)
void eMpblibsWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, const void* pvBuffer, const size_t xBytes, size_t* pxBytesWritten, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsWrite_CALLBACK)(handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, const void* pvBuffer, const size_t xBytes, size_t* pxBytesWritten, int cmock_num_calls);
void eMpblibsWrite_StubWithCallback(CMOCK_eMpblibsWrite_CALLBACK Callback);
#define eMpblibsWrite_ExpectWithArrayAndReturn(xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, cmock_retval) eMpblibsWrite_CMockExpectWithArrayAndReturn(__LINE__, xStream, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, cmock_retval)
void eMpblibsWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, size_t xAddrCmdSize, const void* pvAddrCmd, int pvAddrCmd_Depth, const void* pvBuffer, int pvBuffer_Depth, const size_t xBytes, size_t* pxBytesWritten, int pxBytesWritten_Depth, eMpbError_t cmock_to_return);
#define eMpblibsWrite_ReturnThruPtr_pxBytesWritten(pxBytesWritten) eMpblibsWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, sizeof(*pxBytesWritten))
#define eMpblibsWrite_ReturnArrayThruPtr_pxBytesWritten(pxBytesWritten, cmock_len) eMpblibsWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, (int)(cmock_len * (int)sizeof(*pxBytesWritten)))
#define eMpblibsWrite_ReturnMemThruPtr_pxBytesWritten(pxBytesWritten, cmock_size) eMpblibsWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, cmock_size)
void eMpblibsWrite_CMockReturnMemThruPtr_pxBytesWritten(UNITY_LINE_TYPE cmock_line, size_t* pxBytesWritten, int cmock_size);
#define eMpblibsWrite_IgnoreArg_xStream() eMpblibsWrite_CMockIgnoreArg_xStream(__LINE__)
void eMpblibsWrite_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eMpblibsWrite_IgnoreArg_xAddrCmdSize() eMpblibsWrite_CMockIgnoreArg_xAddrCmdSize(__LINE__)
void eMpblibsWrite_CMockIgnoreArg_xAddrCmdSize(UNITY_LINE_TYPE cmock_line);
#define eMpblibsWrite_IgnoreArg_pvAddrCmd() eMpblibsWrite_CMockIgnoreArg_pvAddrCmd(__LINE__)
void eMpblibsWrite_CMockIgnoreArg_pvAddrCmd(UNITY_LINE_TYPE cmock_line);
#define eMpblibsWrite_IgnoreArg_pvBuffer() eMpblibsWrite_CMockIgnoreArg_pvBuffer(__LINE__)
void eMpblibsWrite_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eMpblibsWrite_IgnoreArg_xBytes() eMpblibsWrite_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsWrite_IgnoreArg_pxBytesWritten() eMpblibsWrite_CMockIgnoreArg_pxBytesWritten(__LINE__)
void eMpblibsWrite_CMockIgnoreArg_pxBytesWritten(UNITY_LINE_TYPE cmock_line);
#define eMpblibsIoCtl_IgnoreAndReturn(cmock_retval) eMpblibsIoCtl_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsIoCtl_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsIoCtl_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsIoCtl_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsIoCtl_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsIoCtl_ExpectAndReturn(xStream, ulRequest, pvValue, cmock_retval) eMpblibsIoCtl_CMockExpectAndReturn(__LINE__, xStream, ulRequest, pvValue, cmock_retval)
void eMpblibsIoCtl_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint32_t ulRequest, void* pvValue, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsIoCtl_CALLBACK)(handle_t xStream, uint32_t ulRequest, void* pvValue, int cmock_num_calls);
void eMpblibsIoCtl_StubWithCallback(CMOCK_eMpblibsIoCtl_CALLBACK Callback);
#define eMpblibsIoCtl_ExpectWithArrayAndReturn(xStream, ulRequest, pvValue, pvValue_Depth, cmock_retval) eMpblibsIoCtl_CMockExpectWithArrayAndReturn(__LINE__, xStream, ulRequest, pvValue, pvValue_Depth, cmock_retval)
void eMpblibsIoCtl_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint32_t ulRequest, void* pvValue, int pvValue_Depth, eMpbError_t cmock_to_return);
#define eMpblibsIoCtl_ReturnThruPtr_pvValue(pvValue) eMpblibsIoCtl_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, sizeof(*pvValue))
#define eMpblibsIoCtl_ReturnArrayThruPtr_pvValue(pvValue, cmock_len) eMpblibsIoCtl_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, (int)(cmock_len * (int)sizeof(*pvValue)))
#define eMpblibsIoCtl_ReturnMemThruPtr_pvValue(pvValue, cmock_size) eMpblibsIoCtl_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, cmock_size)
void eMpblibsIoCtl_CMockReturnMemThruPtr_pvValue(UNITY_LINE_TYPE cmock_line, void* pvValue, int cmock_size);
#define eMpblibsIoCtl_IgnoreArg_xStream() eMpblibsIoCtl_CMockIgnoreArg_xStream(__LINE__)
void eMpblibsIoCtl_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eMpblibsIoCtl_IgnoreArg_ulRequest() eMpblibsIoCtl_CMockIgnoreArg_ulRequest(__LINE__)
void eMpblibsIoCtl_CMockIgnoreArg_ulRequest(UNITY_LINE_TYPE cmock_line);
#define eMpblibsIoCtl_IgnoreArg_pvValue() eMpblibsIoCtl_CMockIgnoreArg_pvValue(__LINE__)
void eMpblibsIoCtl_CMockIgnoreArg_pvValue(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreAndReturn(cmock_retval) eMpblibsI2CRequest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsI2CRequest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsI2CRequest_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsI2CRequest_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsI2CRequest_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsI2CRequest_ExpectAndReturn(eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRW, cmock_retval) eMpblibsI2CRequest_CMockExpectAndReturn(__LINE__, eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvBuffer, xBytes, pxBytesRW, cmock_retval)
void eMpblibsI2CRequest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void* pvAddrCmd, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsI2CRequest_CALLBACK)(eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void* pvAddrCmd, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, int cmock_num_calls);
void eMpblibsI2CRequest_StubWithCallback(CMOCK_eMpblibsI2CRequest_CALLBACK Callback);
#define eMpblibsI2CRequest_ExpectWithArrayAndReturn(eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval) eMpblibsI2CRequest_CMockExpectWithArrayAndReturn(__LINE__, eAccess, xI2Cx, ucDevAddr, xAddrCmdSize, pvAddrCmd, pvAddrCmd_Depth, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval)
void eMpblibsI2CRequest_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void* pvAddrCmd, int pvAddrCmd_Depth, void* pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesRW, int pxBytesRW_Depth, eMpbError_t cmock_to_return);
#define eMpblibsI2CRequest_ReturnThruPtr_pvBuffer(pvBuffer) eMpblibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eMpblibsI2CRequest_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eMpblibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eMpblibsI2CRequest_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eMpblibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eMpblibsI2CRequest_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eMpblibsI2CRequest_ReturnThruPtr_pxBytesRW(pxBytesRW) eMpblibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, sizeof(*pxBytesRW))
#define eMpblibsI2CRequest_ReturnArrayThruPtr_pxBytesRW(pxBytesRW, cmock_len) eMpblibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, (int)(cmock_len * (int)sizeof(*pxBytesRW)))
#define eMpblibsI2CRequest_ReturnMemThruPtr_pxBytesRW(pxBytesRW, cmock_size) eMpblibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, cmock_size)
void eMpblibsI2CRequest_CMockReturnMemThruPtr_pxBytesRW(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRW, int cmock_size);
#define eMpblibsI2CRequest_IgnoreArg_eAccess() eMpblibsI2CRequest_CMockIgnoreArg_eAccess(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_eAccess(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_xI2Cx() eMpblibsI2CRequest_CMockIgnoreArg_xI2Cx(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_xI2Cx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_ucDevAddr() eMpblibsI2CRequest_CMockIgnoreArg_ucDevAddr(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_ucDevAddr(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_xAddrCmdSize() eMpblibsI2CRequest_CMockIgnoreArg_xAddrCmdSize(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_xAddrCmdSize(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_pvAddrCmd() eMpblibsI2CRequest_CMockIgnoreArg_pvAddrCmd(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_pvAddrCmd(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_pvBuffer() eMpblibsI2CRequest_CMockIgnoreArg_pvBuffer(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_xBytes() eMpblibsI2CRequest_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsI2CRequest_IgnoreArg_pxBytesRW() eMpblibsI2CRequest_CMockIgnoreArg_pxBytesRW(__LINE__)
void eMpblibsI2CRequest_CMockIgnoreArg_pxBytesRW(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBytesReadWrite_IgnoreAndReturn(cmock_retval) eMpblibsSPIBytesReadWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsSPIBytesReadWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsSPIBytesReadWrite_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsSPIBytesReadWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsSPIBytesReadWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsSPIBytesReadWrite_ExpectAndReturn(xSPIx, pvBytesOut, pvBytesIn, xBytes, cmock_retval) eMpblibsSPIBytesReadWrite_CMockExpectAndReturn(__LINE__, xSPIx, pvBytesOut, pvBytesIn, xBytes, cmock_retval)
void eMpblibsSPIBytesReadWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xSPIx, void* const pvBytesOut, void* pvBytesIn, size_t xBytes, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsSPIBytesReadWrite_CALLBACK)(handle_t xSPIx, void* const pvBytesOut, void* pvBytesIn, size_t xBytes, int cmock_num_calls);
void eMpblibsSPIBytesReadWrite_StubWithCallback(CMOCK_eMpblibsSPIBytesReadWrite_CALLBACK Callback);
#define eMpblibsSPIBytesReadWrite_ExpectWithArrayAndReturn(xSPIx, pvBytesOut, pvBytesOut_Depth, pvBytesIn, pvBytesIn_Depth, xBytes, cmock_retval) eMpblibsSPIBytesReadWrite_CMockExpectWithArrayAndReturn(__LINE__, xSPIx, pvBytesOut, pvBytesOut_Depth, pvBytesIn, pvBytesIn_Depth, xBytes, cmock_retval)
void eMpblibsSPIBytesReadWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xSPIx, void* const pvBytesOut, int pvBytesOut_Depth, void* pvBytesIn, int pvBytesIn_Depth, size_t xBytes, eMpbError_t cmock_to_return);
#define eMpblibsSPIBytesReadWrite_ReturnThruPtr_pvBytesOut(pvBytesOut) eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(__LINE__, pvBytesOut, sizeof(*pvBytesOut))
#define eMpblibsSPIBytesReadWrite_ReturnArrayThruPtr_pvBytesOut(pvBytesOut, cmock_len) eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(__LINE__, pvBytesOut, (int)(cmock_len * (int)sizeof(*pvBytesOut)))
#define eMpblibsSPIBytesReadWrite_ReturnMemThruPtr_pvBytesOut(pvBytesOut, cmock_size) eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(__LINE__, pvBytesOut, cmock_size)
void eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesOut(UNITY_LINE_TYPE cmock_line, void* pvBytesOut, int cmock_size);
#define eMpblibsSPIBytesReadWrite_ReturnThruPtr_pvBytesIn(pvBytesIn) eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(__LINE__, pvBytesIn, sizeof(*pvBytesIn))
#define eMpblibsSPIBytesReadWrite_ReturnArrayThruPtr_pvBytesIn(pvBytesIn, cmock_len) eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(__LINE__, pvBytesIn, (int)(cmock_len * (int)sizeof(*pvBytesIn)))
#define eMpblibsSPIBytesReadWrite_ReturnMemThruPtr_pvBytesIn(pvBytesIn, cmock_size) eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(__LINE__, pvBytesIn, cmock_size)
void eMpblibsSPIBytesReadWrite_CMockReturnMemThruPtr_pvBytesIn(UNITY_LINE_TYPE cmock_line, void* pvBytesIn, int cmock_size);
#define eMpblibsSPIBytesReadWrite_IgnoreArg_xSPIx() eMpblibsSPIBytesReadWrite_CMockIgnoreArg_xSPIx(__LINE__)
void eMpblibsSPIBytesReadWrite_CMockIgnoreArg_xSPIx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBytesReadWrite_IgnoreArg_pvBytesOut() eMpblibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesOut(__LINE__)
void eMpblibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesOut(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBytesReadWrite_IgnoreArg_pvBytesIn() eMpblibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesIn(__LINE__)
void eMpblibsSPIBytesReadWrite_CMockIgnoreArg_pvBytesIn(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBytesReadWrite_IgnoreArg_xBytes() eMpblibsSPIBytesReadWrite_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsSPIBytesReadWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBlockReadWrite_IgnoreAndReturn(cmock_retval) eMpblibsSPIBlockReadWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsSPIBlockReadWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsSPIBlockReadWrite_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsSPIBlockReadWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsSPIBlockReadWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsSPIBlockReadWrite_ExpectAndReturn(eAccess, xSPIx, pvBuffer, xBytes, pxBytesRW, cmock_retval) eMpblibsSPIBlockReadWrite_CMockExpectAndReturn(__LINE__, eAccess, xSPIx, pvBuffer, xBytes, pxBytesRW, cmock_retval)
void eMpblibsSPIBlockReadWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xSPIx, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsSPIBlockReadWrite_CALLBACK)(eAccess_t eAccess, handle_t xSPIx, void* pvBuffer, size_t xBytes, size_t* pxBytesRW, int cmock_num_calls);
void eMpblibsSPIBlockReadWrite_StubWithCallback(CMOCK_eMpblibsSPIBlockReadWrite_CALLBACK Callback);
#define eMpblibsSPIBlockReadWrite_ExpectWithArrayAndReturn(eAccess, xSPIx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval) eMpblibsSPIBlockReadWrite_CMockExpectWithArrayAndReturn(__LINE__, eAccess, xSPIx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRW, pxBytesRW_Depth, cmock_retval)
void eMpblibsSPIBlockReadWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, eAccess_t eAccess, handle_t xSPIx, void* pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesRW, int pxBytesRW_Depth, eMpbError_t cmock_to_return);
#define eMpblibsSPIBlockReadWrite_ReturnThruPtr_pvBuffer(pvBuffer) eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eMpblibsSPIBlockReadWrite_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eMpblibsSPIBlockReadWrite_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eMpblibsSPIBlockReadWrite_ReturnThruPtr_pxBytesRW(pxBytesRW) eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, sizeof(*pxBytesRW))
#define eMpblibsSPIBlockReadWrite_ReturnArrayThruPtr_pxBytesRW(pxBytesRW, cmock_len) eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, (int)(cmock_len * (int)sizeof(*pxBytesRW)))
#define eMpblibsSPIBlockReadWrite_ReturnMemThruPtr_pxBytesRW(pxBytesRW, cmock_size) eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(__LINE__, pxBytesRW, cmock_size)
void eMpblibsSPIBlockReadWrite_CMockReturnMemThruPtr_pxBytesRW(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRW, int cmock_size);
#define eMpblibsSPIBlockReadWrite_IgnoreArg_eAccess() eMpblibsSPIBlockReadWrite_CMockIgnoreArg_eAccess(__LINE__)
void eMpblibsSPIBlockReadWrite_CMockIgnoreArg_eAccess(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBlockReadWrite_IgnoreArg_xSPIx() eMpblibsSPIBlockReadWrite_CMockIgnoreArg_xSPIx(__LINE__)
void eMpblibsSPIBlockReadWrite_CMockIgnoreArg_xSPIx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBlockReadWrite_IgnoreArg_pvBuffer() eMpblibsSPIBlockReadWrite_CMockIgnoreArg_pvBuffer(__LINE__)
void eMpblibsSPIBlockReadWrite_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBlockReadWrite_IgnoreArg_xBytes() eMpblibsSPIBlockReadWrite_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsSPIBlockReadWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsSPIBlockReadWrite_IgnoreArg_pxBytesRW() eMpblibsSPIBlockReadWrite_CMockIgnoreArg_pxBytesRW(__LINE__)
void eMpblibsSPIBlockReadWrite_CMockIgnoreArg_pxBytesRW(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreAndReturn(cmock_retval) eMpblibsUartInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsUartInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsUartInit_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsUartInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsUartInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsUartInit_ExpectAndReturn(xUARTx, xGPIOx, ulPin, ulBaudRate, ucWordLength, ucStopBits, ucParity, xSilenceBits, xFrameTimeoutBits, cmock_retval) eMpblibsUartInit_CMockExpectAndReturn(__LINE__, xUARTx, xGPIOx, ulPin, ulBaudRate, ucWordLength, ucStopBits, ucParity, xSilenceBits, xFrameTimeoutBits, cmock_retval)
void eMpblibsUartInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, handle_t xGPIOx, uint32_t ulPin, uint32_t ulBaudRate, uint8_t ucWordLength, uint8_t ucStopBits, uint8_t ucParity, size_t xSilenceBits, size_t xFrameTimeoutBits, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsUartInit_CALLBACK)(handle_t xUARTx, handle_t xGPIOx, uint32_t ulPin, uint32_t ulBaudRate, uint8_t ucWordLength, uint8_t ucStopBits, uint8_t ucParity, size_t xSilenceBits, size_t xFrameTimeoutBits, int cmock_num_calls);
void eMpblibsUartInit_StubWithCallback(CMOCK_eMpblibsUartInit_CALLBACK Callback);
#define eMpblibsUartInit_IgnoreArg_xUARTx() eMpblibsUartInit_CMockIgnoreArg_xUARTx(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_xUARTx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_xGPIOx() eMpblibsUartInit_CMockIgnoreArg_xGPIOx(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_xGPIOx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_ulPin() eMpblibsUartInit_CMockIgnoreArg_ulPin(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_ulPin(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_ulBaudRate() eMpblibsUartInit_CMockIgnoreArg_ulBaudRate(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_ulBaudRate(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_ucWordLength() eMpblibsUartInit_CMockIgnoreArg_ucWordLength(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_ucWordLength(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_ucStopBits() eMpblibsUartInit_CMockIgnoreArg_ucStopBits(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_ucStopBits(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_ucParity() eMpblibsUartInit_CMockIgnoreArg_ucParity(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_ucParity(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_xSilenceBits() eMpblibsUartInit_CMockIgnoreArg_xSilenceBits(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_xSilenceBits(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartInit_IgnoreArg_xFrameTimeoutBits() eMpblibsUartInit_CMockIgnoreArg_xFrameTimeoutBits(__LINE__)
void eMpblibsUartInit_CMockIgnoreArg_xFrameTimeoutBits(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartRead_IgnoreAndReturn(cmock_retval) eMpblibsUartRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsUartRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsUartRead_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsUartRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsUartRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsUartRead_ExpectAndReturn(xUARTx, pvBuffer, xBytes, pxBytesRead, ulMsTimeout, cmock_retval) eMpblibsUartRead_CMockExpectAndReturn(__LINE__, xUARTx, pvBuffer, xBytes, pxBytesRead, ulMsTimeout, cmock_retval)
void eMpblibsUartRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, void* const pvBuffer, size_t xBytes, size_t* pxBytesRead, uint32_t ulMsTimeout, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsUartRead_CALLBACK)(handle_t xUARTx, void* const pvBuffer, size_t xBytes, size_t* pxBytesRead, uint32_t ulMsTimeout, int cmock_num_calls);
void eMpblibsUartRead_StubWithCallback(CMOCK_eMpblibsUartRead_CALLBACK Callback);
#define eMpblibsUartRead_ExpectWithArrayAndReturn(xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, ulMsTimeout, cmock_retval) eMpblibsUartRead_CMockExpectWithArrayAndReturn(__LINE__, xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesRead, pxBytesRead_Depth, ulMsTimeout, cmock_retval)
void eMpblibsUartRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, void* const pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesRead, int pxBytesRead_Depth, uint32_t ulMsTimeout, eMpbError_t cmock_to_return);
#define eMpblibsUartRead_ReturnThruPtr_pvBuffer(pvBuffer) eMpblibsUartRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(*pvBuffer))
#define eMpblibsUartRead_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) eMpblibsUartRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define eMpblibsUartRead_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) eMpblibsUartRead_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void eMpblibsUartRead_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define eMpblibsUartRead_ReturnThruPtr_pxBytesRead(pxBytesRead) eMpblibsUartRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, sizeof(*pxBytesRead))
#define eMpblibsUartRead_ReturnArrayThruPtr_pxBytesRead(pxBytesRead, cmock_len) eMpblibsUartRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, (int)(cmock_len * (int)sizeof(*pxBytesRead)))
#define eMpblibsUartRead_ReturnMemThruPtr_pxBytesRead(pxBytesRead, cmock_size) eMpblibsUartRead_CMockReturnMemThruPtr_pxBytesRead(__LINE__, pxBytesRead, cmock_size)
void eMpblibsUartRead_CMockReturnMemThruPtr_pxBytesRead(UNITY_LINE_TYPE cmock_line, size_t* pxBytesRead, int cmock_size);
#define eMpblibsUartRead_IgnoreArg_xUARTx() eMpblibsUartRead_CMockIgnoreArg_xUARTx(__LINE__)
void eMpblibsUartRead_CMockIgnoreArg_xUARTx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartRead_IgnoreArg_pvBuffer() eMpblibsUartRead_CMockIgnoreArg_pvBuffer(__LINE__)
void eMpblibsUartRead_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartRead_IgnoreArg_xBytes() eMpblibsUartRead_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsUartRead_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartRead_IgnoreArg_pxBytesRead() eMpblibsUartRead_CMockIgnoreArg_pxBytesRead(__LINE__)
void eMpblibsUartRead_CMockIgnoreArg_pxBytesRead(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartRead_IgnoreArg_ulMsTimeout() eMpblibsUartRead_CMockIgnoreArg_ulMsTimeout(__LINE__)
void eMpblibsUartRead_CMockIgnoreArg_ulMsTimeout(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartWrite_IgnoreAndReturn(cmock_retval) eMpblibsUartWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsUartWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsUartWrite_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsUartWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsUartWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsUartWrite_ExpectAndReturn(xUARTx, pvBuffer, xBytes, pxBytesWritten, ulMsTimeout, cmock_retval) eMpblibsUartWrite_CMockExpectAndReturn(__LINE__, xUARTx, pvBuffer, xBytes, pxBytesWritten, ulMsTimeout, cmock_retval)
void eMpblibsUartWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, const void* pvBuffer, size_t xBytes, size_t* pxBytesWritten, uint32_t ulMsTimeout, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsUartWrite_CALLBACK)(handle_t xUARTx, const void* pvBuffer, size_t xBytes, size_t* pxBytesWritten, uint32_t ulMsTimeout, int cmock_num_calls);
void eMpblibsUartWrite_StubWithCallback(CMOCK_eMpblibsUartWrite_CALLBACK Callback);
#define eMpblibsUartWrite_ExpectWithArrayAndReturn(xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, ulMsTimeout, cmock_retval) eMpblibsUartWrite_CMockExpectWithArrayAndReturn(__LINE__, xUARTx, pvBuffer, pvBuffer_Depth, xBytes, pxBytesWritten, pxBytesWritten_Depth, ulMsTimeout, cmock_retval)
void eMpblibsUartWrite_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xUARTx, const void* pvBuffer, int pvBuffer_Depth, size_t xBytes, size_t* pxBytesWritten, int pxBytesWritten_Depth, uint32_t ulMsTimeout, eMpbError_t cmock_to_return);
#define eMpblibsUartWrite_ReturnThruPtr_pxBytesWritten(pxBytesWritten) eMpblibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, sizeof(*pxBytesWritten))
#define eMpblibsUartWrite_ReturnArrayThruPtr_pxBytesWritten(pxBytesWritten, cmock_len) eMpblibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, (int)(cmock_len * (int)sizeof(*pxBytesWritten)))
#define eMpblibsUartWrite_ReturnMemThruPtr_pxBytesWritten(pxBytesWritten, cmock_size) eMpblibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(__LINE__, pxBytesWritten, cmock_size)
void eMpblibsUartWrite_CMockReturnMemThruPtr_pxBytesWritten(UNITY_LINE_TYPE cmock_line, size_t* pxBytesWritten, int cmock_size);
#define eMpblibsUartWrite_IgnoreArg_xUARTx() eMpblibsUartWrite_CMockIgnoreArg_xUARTx(__LINE__)
void eMpblibsUartWrite_CMockIgnoreArg_xUARTx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartWrite_IgnoreArg_pvBuffer() eMpblibsUartWrite_CMockIgnoreArg_pvBuffer(__LINE__)
void eMpblibsUartWrite_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartWrite_IgnoreArg_xBytes() eMpblibsUartWrite_CMockIgnoreArg_xBytes(__LINE__)
void eMpblibsUartWrite_CMockIgnoreArg_xBytes(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartWrite_IgnoreArg_pxBytesWritten() eMpblibsUartWrite_CMockIgnoreArg_pxBytesWritten(__LINE__)
void eMpblibsUartWrite_CMockIgnoreArg_pxBytesWritten(UNITY_LINE_TYPE cmock_line);
#define eMpblibsUartWrite_IgnoreArg_ulMsTimeout() eMpblibsUartWrite_CMockIgnoreArg_ulMsTimeout(__LINE__)
void eMpblibsUartWrite_CMockIgnoreArg_ulMsTimeout(UNITY_LINE_TYPE cmock_line);
#define eMpblibsPwrMonInit_IgnoreAndReturn(cmock_retval) eMpblibsPwrMonInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsPwrMonInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsPwrMonInit_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsPwrMonInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsPwrMonInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsPwrMonInit_ExpectAndReturn(cmock_retval) eMpblibsPwrMonInit_CMockExpectAndReturn(__LINE__, cmock_retval)
void eMpblibsPwrMonInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsPwrMonInit_CALLBACK)(int cmock_num_calls);
void eMpblibsPwrMonInit_StubWithCallback(CMOCK_eMpblibsPwrMonInit_CALLBACK Callback);
#define eMpblibsPwrMonWaitPwrUp_IgnoreAndReturn(cmock_retval) eMpblibsPwrMonWaitPwrUp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsPwrMonWaitPwrUp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsPwrMonWaitPwrUp_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsPwrMonWaitPwrUp_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsPwrMonWaitPwrUp_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsPwrMonWaitPwrUp_ExpectAndReturn(cmock_retval) eMpblibsPwrMonWaitPwrUp_CMockExpectAndReturn(__LINE__, cmock_retval)
void eMpblibsPwrMonWaitPwrUp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsPwrMonWaitPwrUp_CALLBACK)(int cmock_num_calls);
void eMpblibsPwrMonWaitPwrUp_StubWithCallback(CMOCK_eMpblibsPwrMonWaitPwrUp_CALLBACK Callback);
#define sMpblibsPwrMonIsLow_IgnoreAndReturn(cmock_retval) sMpblibsPwrMonIsLow_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sMpblibsPwrMonIsLow_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define sMpblibsPwrMonIsLow_ExpectAnyArgsAndReturn(cmock_retval) sMpblibsPwrMonIsLow_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void sMpblibsPwrMonIsLow_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define sMpblibsPwrMonIsLow_ExpectAndReturn(cmock_retval) sMpblibsPwrMonIsLow_CMockExpectAndReturn(__LINE__, cmock_retval)
void sMpblibsPwrMonIsLow_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_sMpblibsPwrMonIsLow_CALLBACK)(int cmock_num_calls);
void sMpblibsPwrMonIsLow_StubWithCallback(CMOCK_sMpblibsPwrMonIsLow_CALLBACK Callback);
#define vMpblibsPowerMonitorSoftReset_Ignore() vMpblibsPowerMonitorSoftReset_CMockIgnore()
void vMpblibsPowerMonitorSoftReset_CMockIgnore(void);
#define vMpblibsPowerMonitorSoftReset_ExpectAnyArgs() vMpblibsPowerMonitorSoftReset_CMockExpectAnyArgs(__LINE__)
void vMpblibsPowerMonitorSoftReset_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpblibsPowerMonitorSoftReset_Expect() vMpblibsPowerMonitorSoftReset_CMockExpect(__LINE__)
void vMpblibsPowerMonitorSoftReset_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vMpblibsPowerMonitorSoftReset_CALLBACK)(int cmock_num_calls);
void vMpblibsPowerMonitorSoftReset_StubWithCallback(CMOCK_vMpblibsPowerMonitorSoftReset_CALLBACK Callback);
#define eMpblibsAnalogReadRaw_IgnoreAndReturn(cmock_retval) eMpblibsAnalogReadRaw_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogReadRaw_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadRaw_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogReadRaw_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogReadRaw_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadRaw_ExpectAndReturn(xANALOGx, plReading, cmock_retval) eMpblibsAnalogReadRaw_CMockExpectAndReturn(__LINE__, xANALOGx, plReading, cmock_retval)
void eMpblibsAnalogReadRaw_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogReadRaw_CALLBACK)(handle_t xANALOGx, int32_t* plReading, int cmock_num_calls);
void eMpblibsAnalogReadRaw_StubWithCallback(CMOCK_eMpblibsAnalogReadRaw_CALLBACK Callback);
#define eMpblibsAnalogReadRaw_ExpectWithArrayAndReturn(xANALOGx, plReading, plReading_Depth, cmock_retval) eMpblibsAnalogReadRaw_CMockExpectWithArrayAndReturn(__LINE__, xANALOGx, plReading, plReading_Depth, cmock_retval)
void eMpblibsAnalogReadRaw_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, int plReading_Depth, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadRaw_ReturnThruPtr_plReading(plReading) eMpblibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(__LINE__, plReading, sizeof(*plReading))
#define eMpblibsAnalogReadRaw_ReturnArrayThruPtr_plReading(plReading, cmock_len) eMpblibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(__LINE__, plReading, (int)(cmock_len * (int)sizeof(*plReading)))
#define eMpblibsAnalogReadRaw_ReturnMemThruPtr_plReading(plReading, cmock_size) eMpblibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(__LINE__, plReading, cmock_size)
void eMpblibsAnalogReadRaw_CMockReturnMemThruPtr_plReading(UNITY_LINE_TYPE cmock_line, int32_t* plReading, int cmock_size);
#define eMpblibsAnalogReadRaw_IgnoreArg_xANALOGx() eMpblibsAnalogReadRaw_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogReadRaw_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogReadRaw_IgnoreArg_plReading() eMpblibsAnalogReadRaw_CMockIgnoreArg_plReading(__LINE__)
void eMpblibsAnalogReadRaw_CMockIgnoreArg_plReading(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogReadmV_IgnoreAndReturn(cmock_retval) eMpblibsAnalogReadmV_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogReadmV_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadmV_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogReadmV_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogReadmV_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadmV_ExpectAndReturn(xANALOGx, plReading, cmock_retval) eMpblibsAnalogReadmV_CMockExpectAndReturn(__LINE__, xANALOGx, plReading, cmock_retval)
void eMpblibsAnalogReadmV_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogReadmV_CALLBACK)(handle_t xANALOGx, int32_t* plReading, int cmock_num_calls);
void eMpblibsAnalogReadmV_StubWithCallback(CMOCK_eMpblibsAnalogReadmV_CALLBACK Callback);
#define eMpblibsAnalogReadmV_ExpectWithArrayAndReturn(xANALOGx, plReading, plReading_Depth, cmock_retval) eMpblibsAnalogReadmV_CMockExpectWithArrayAndReturn(__LINE__, xANALOGx, plReading, plReading_Depth, cmock_retval)
void eMpblibsAnalogReadmV_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t* plReading, int plReading_Depth, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadmV_ReturnThruPtr_plReading(plReading) eMpblibsAnalogReadmV_CMockReturnMemThruPtr_plReading(__LINE__, plReading, sizeof(*plReading))
#define eMpblibsAnalogReadmV_ReturnArrayThruPtr_plReading(plReading, cmock_len) eMpblibsAnalogReadmV_CMockReturnMemThruPtr_plReading(__LINE__, plReading, (int)(cmock_len * (int)sizeof(*plReading)))
#define eMpblibsAnalogReadmV_ReturnMemThruPtr_plReading(plReading, cmock_size) eMpblibsAnalogReadmV_CMockReturnMemThruPtr_plReading(__LINE__, plReading, cmock_size)
void eMpblibsAnalogReadmV_CMockReturnMemThruPtr_plReading(UNITY_LINE_TYPE cmock_line, int32_t* plReading, int cmock_size);
#define eMpblibsAnalogReadmV_IgnoreArg_xANALOGx() eMpblibsAnalogReadmV_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogReadmV_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogReadmV_IgnoreArg_plReading() eMpblibsAnalogReadmV_CMockIgnoreArg_plReading(__LINE__)
void eMpblibsAnalogReadmV_CMockIgnoreArg_plReading(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogReadRes_IgnoreAndReturn(cmock_retval) eMpblibsAnalogReadRes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogReadRes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadRes_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogReadRes_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogReadRes_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadRes_ExpectAndReturn(xANALOGx, lResolution, plReading, cmock_retval) eMpblibsAnalogReadRes_CMockExpectAndReturn(__LINE__, xANALOGx, lResolution, plReading, cmock_retval)
void eMpblibsAnalogReadRes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lResolution, int32_t* plReading, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogReadRes_CALLBACK)(handle_t xANALOGx, int32_t lResolution, int32_t* plReading, int cmock_num_calls);
void eMpblibsAnalogReadRes_StubWithCallback(CMOCK_eMpblibsAnalogReadRes_CALLBACK Callback);
#define eMpblibsAnalogReadRes_ExpectWithArrayAndReturn(xANALOGx, lResolution, plReading, plReading_Depth, cmock_retval) eMpblibsAnalogReadRes_CMockExpectWithArrayAndReturn(__LINE__, xANALOGx, lResolution, plReading, plReading_Depth, cmock_retval)
void eMpblibsAnalogReadRes_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lResolution, int32_t* plReading, int plReading_Depth, eMpbError_t cmock_to_return);
#define eMpblibsAnalogReadRes_ReturnThruPtr_plReading(plReading) eMpblibsAnalogReadRes_CMockReturnMemThruPtr_plReading(__LINE__, plReading, sizeof(*plReading))
#define eMpblibsAnalogReadRes_ReturnArrayThruPtr_plReading(plReading, cmock_len) eMpblibsAnalogReadRes_CMockReturnMemThruPtr_plReading(__LINE__, plReading, (int)(cmock_len * (int)sizeof(*plReading)))
#define eMpblibsAnalogReadRes_ReturnMemThruPtr_plReading(plReading, cmock_size) eMpblibsAnalogReadRes_CMockReturnMemThruPtr_plReading(__LINE__, plReading, cmock_size)
void eMpblibsAnalogReadRes_CMockReturnMemThruPtr_plReading(UNITY_LINE_TYPE cmock_line, int32_t* plReading, int cmock_size);
#define eMpblibsAnalogReadRes_IgnoreArg_xANALOGx() eMpblibsAnalogReadRes_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogReadRes_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogReadRes_IgnoreArg_lResolution() eMpblibsAnalogReadRes_CMockIgnoreArg_lResolution(__LINE__)
void eMpblibsAnalogReadRes_CMockIgnoreArg_lResolution(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogReadRes_IgnoreArg_plReading() eMpblibsAnalogReadRes_CMockIgnoreArg_plReading(__LINE__)
void eMpblibsAnalogReadRes_CMockIgnoreArg_plReading(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWriteRaw_IgnoreAndReturn(cmock_retval) eMpblibsAnalogWriteRaw_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogWriteRaw_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogWriteRaw_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogWriteRaw_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogWriteRaw_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogWriteRaw_ExpectAndReturn(xANALOGx, lOutput, cmock_retval) eMpblibsAnalogWriteRaw_CMockExpectAndReturn(__LINE__, xANALOGx, lOutput, cmock_retval)
void eMpblibsAnalogWriteRaw_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lOutput, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogWriteRaw_CALLBACK)(handle_t xANALOGx, int32_t lOutput, int cmock_num_calls);
void eMpblibsAnalogWriteRaw_StubWithCallback(CMOCK_eMpblibsAnalogWriteRaw_CALLBACK Callback);
#define eMpblibsAnalogWriteRaw_IgnoreArg_xANALOGx() eMpblibsAnalogWriteRaw_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogWriteRaw_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWriteRaw_IgnoreArg_lOutput() eMpblibsAnalogWriteRaw_CMockIgnoreArg_lOutput(__LINE__)
void eMpblibsAnalogWriteRaw_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWritemV_IgnoreAndReturn(cmock_retval) eMpblibsAnalogWritemV_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogWritemV_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogWritemV_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogWritemV_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogWritemV_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogWritemV_ExpectAndReturn(xANALOGx, lOutput, cmock_retval) eMpblibsAnalogWritemV_CMockExpectAndReturn(__LINE__, xANALOGx, lOutput, cmock_retval)
void eMpblibsAnalogWritemV_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lOutput, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogWritemV_CALLBACK)(handle_t xANALOGx, int32_t lOutput, int cmock_num_calls);
void eMpblibsAnalogWritemV_StubWithCallback(CMOCK_eMpblibsAnalogWritemV_CALLBACK Callback);
#define eMpblibsAnalogWritemV_IgnoreArg_xANALOGx() eMpblibsAnalogWritemV_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogWritemV_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWritemV_IgnoreArg_lOutput() eMpblibsAnalogWritemV_CMockIgnoreArg_lOutput(__LINE__)
void eMpblibsAnalogWritemV_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogModulationWritemV_IgnoreAndReturn(cmock_retval) eMpblibsAnalogModulationWritemV_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogModulationWritemV_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogModulationWritemV_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogModulationWritemV_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogModulationWritemV_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogModulationWritemV_ExpectAndReturn(xANALOGx, lOutput, lLowOutput, cmock_retval) eMpblibsAnalogModulationWritemV_CMockExpectAndReturn(__LINE__, xANALOGx, lOutput, lLowOutput, cmock_retval)
void eMpblibsAnalogModulationWritemV_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lOutput, int32_t lLowOutput, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogModulationWritemV_CALLBACK)(handle_t xANALOGx, int32_t lOutput, int32_t lLowOutput, int cmock_num_calls);
void eMpblibsAnalogModulationWritemV_StubWithCallback(CMOCK_eMpblibsAnalogModulationWritemV_CALLBACK Callback);
#define eMpblibsAnalogModulationWritemV_IgnoreArg_xANALOGx() eMpblibsAnalogModulationWritemV_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogModulationWritemV_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogModulationWritemV_IgnoreArg_lOutput() eMpblibsAnalogModulationWritemV_CMockIgnoreArg_lOutput(__LINE__)
void eMpblibsAnalogModulationWritemV_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogModulationWritemV_IgnoreArg_lLowOutput() eMpblibsAnalogModulationWritemV_CMockIgnoreArg_lLowOutput(__LINE__)
void eMpblibsAnalogModulationWritemV_CMockIgnoreArg_lLowOutput(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWriteRes_IgnoreAndReturn(cmock_retval) eMpblibsAnalogWriteRes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogWriteRes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogWriteRes_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsAnalogWriteRes_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsAnalogWriteRes_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsAnalogWriteRes_ExpectAndReturn(xANALOGx, lResolution, lOutput, cmock_retval) eMpblibsAnalogWriteRes_CMockExpectAndReturn(__LINE__, xANALOGx, lResolution, lOutput, cmock_retval)
void eMpblibsAnalogWriteRes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xANALOGx, int32_t lResolution, int32_t lOutput, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsAnalogWriteRes_CALLBACK)(handle_t xANALOGx, int32_t lResolution, int32_t lOutput, int cmock_num_calls);
void eMpblibsAnalogWriteRes_StubWithCallback(CMOCK_eMpblibsAnalogWriteRes_CALLBACK Callback);
#define eMpblibsAnalogWriteRes_IgnoreArg_xANALOGx() eMpblibsAnalogWriteRes_CMockIgnoreArg_xANALOGx(__LINE__)
void eMpblibsAnalogWriteRes_CMockIgnoreArg_xANALOGx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWriteRes_IgnoreArg_lResolution() eMpblibsAnalogWriteRes_CMockIgnoreArg_lResolution(__LINE__)
void eMpblibsAnalogWriteRes_CMockIgnoreArg_lResolution(UNITY_LINE_TYPE cmock_line);
#define eMpblibsAnalogWriteRes_IgnoreArg_lOutput() eMpblibsAnalogWriteRes_CMockIgnoreArg_lOutput(__LINE__)
void eMpblibsAnalogWriteRes_CMockIgnoreArg_lOutput(UNITY_LINE_TYPE cmock_line);
#define eMpblibsBinaryRead_IgnoreAndReturn(cmock_retval) eMpblibsBinaryRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsBinaryRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsBinaryRead_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsBinaryRead_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsBinaryRead_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsBinaryRead_ExpectAndReturn(xBINARYx, peState, cmock_retval) eMpblibsBinaryRead_CMockExpectAndReturn(__LINE__, xBINARYx, peState, cmock_retval)
void eMpblibsBinaryRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eBool_t* peState, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsBinaryRead_CALLBACK)(handle_t xBINARYx, eBool_t* peState, int cmock_num_calls);
void eMpblibsBinaryRead_StubWithCallback(CMOCK_eMpblibsBinaryRead_CALLBACK Callback);
#define eMpblibsBinaryRead_ExpectWithArrayAndReturn(xBINARYx, peState, peState_Depth, cmock_retval) eMpblibsBinaryRead_CMockExpectWithArrayAndReturn(__LINE__, xBINARYx, peState, peState_Depth, cmock_retval)
void eMpblibsBinaryRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eBool_t* peState, int peState_Depth, eMpbError_t cmock_to_return);
#define eMpblibsBinaryRead_ReturnThruPtr_peState(peState) eMpblibsBinaryRead_CMockReturnMemThruPtr_peState(__LINE__, peState, sizeof(*peState))
#define eMpblibsBinaryRead_ReturnArrayThruPtr_peState(peState, cmock_len) eMpblibsBinaryRead_CMockReturnMemThruPtr_peState(__LINE__, peState, (int)(cmock_len * (int)sizeof(*peState)))
#define eMpblibsBinaryRead_ReturnMemThruPtr_peState(peState, cmock_size) eMpblibsBinaryRead_CMockReturnMemThruPtr_peState(__LINE__, peState, cmock_size)
void eMpblibsBinaryRead_CMockReturnMemThruPtr_peState(UNITY_LINE_TYPE cmock_line, eBool_t* peState, int cmock_size);
#define eMpblibsBinaryRead_IgnoreArg_xBINARYx() eMpblibsBinaryRead_CMockIgnoreArg_xBINARYx(__LINE__)
void eMpblibsBinaryRead_CMockIgnoreArg_xBINARYx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsBinaryRead_IgnoreArg_peState() eMpblibsBinaryRead_CMockIgnoreArg_peState(__LINE__)
void eMpblibsBinaryRead_CMockIgnoreArg_peState(UNITY_LINE_TYPE cmock_line);
#define eMpblibsBinaryWrite_IgnoreAndReturn(cmock_retval) eMpblibsBinaryWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsBinaryWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsBinaryWrite_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsBinaryWrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsBinaryWrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsBinaryWrite_ExpectAndReturn(xBINARYx, eState, cmock_retval) eMpblibsBinaryWrite_CMockExpectAndReturn(__LINE__, xBINARYx, eState, cmock_retval)
void eMpblibsBinaryWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eBool_t eState, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsBinaryWrite_CALLBACK)(handle_t xBINARYx, eBool_t eState, int cmock_num_calls);
void eMpblibsBinaryWrite_StubWithCallback(CMOCK_eMpblibsBinaryWrite_CALLBACK Callback);
#define eMpblibsBinaryWrite_IgnoreArg_xBINARYx() eMpblibsBinaryWrite_CMockIgnoreArg_xBINARYx(__LINE__)
void eMpblibsBinaryWrite_CMockIgnoreArg_xBINARYx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsBinaryWrite_IgnoreArg_eState() eMpblibsBinaryWrite_CMockIgnoreArg_eState(__LINE__)
void eMpblibsBinaryWrite_CMockIgnoreArg_eState(UNITY_LINE_TYPE cmock_line);
#define eMpblibsBinaryToggle_IgnoreAndReturn(cmock_retval) eMpblibsBinaryToggle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsBinaryToggle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsBinaryToggle_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsBinaryToggle_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsBinaryToggle_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsBinaryToggle_ExpectAndReturn(xBINARYx, cmock_retval) eMpblibsBinaryToggle_CMockExpectAndReturn(__LINE__, xBINARYx, cmock_retval)
void eMpblibsBinaryToggle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xBINARYx, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsBinaryToggle_CALLBACK)(handle_t xBINARYx, int cmock_num_calls);
void eMpblibsBinaryToggle_StubWithCallback(CMOCK_eMpblibsBinaryToggle_CALLBACK Callback);
#define eMpblibsBinaryToggle_IgnoreArg_xBINARYx() eMpblibsBinaryToggle_CMockIgnoreArg_xBINARYx(__LINE__)
void eMpblibsBinaryToggle_CMockIgnoreArg_xBINARYx(UNITY_LINE_TYPE cmock_line);
#define eMpblibsMalloc_IgnoreAndReturn(cmock_retval) eMpblibsMalloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsMalloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsMalloc_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsMalloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsMalloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsMalloc_ExpectAndReturn(ppvMemBlock, xSize, cmock_retval) eMpblibsMalloc_CMockExpectAndReturn(__LINE__, ppvMemBlock, xSize, cmock_retval)
void eMpblibsMalloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, size_t xSize, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsMalloc_CALLBACK)(void** ppvMemBlock, size_t xSize, int cmock_num_calls);
void eMpblibsMalloc_StubWithCallback(CMOCK_eMpblibsMalloc_CALLBACK Callback);
#define eMpblibsMalloc_ExpectWithArrayAndReturn(ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval) eMpblibsMalloc_CMockExpectWithArrayAndReturn(__LINE__, ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval)
void eMpblibsMalloc_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int ppvMemBlock_Depth, size_t xSize, eMpbError_t cmock_to_return);
#define eMpblibsMalloc_ReturnThruPtr_ppvMemBlock(ppvMemBlock) eMpblibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, sizeof(*ppvMemBlock))
#define eMpblibsMalloc_ReturnArrayThruPtr_ppvMemBlock(ppvMemBlock, cmock_len) eMpblibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, (int)(cmock_len * (int)sizeof(*ppvMemBlock)))
#define eMpblibsMalloc_ReturnMemThruPtr_ppvMemBlock(ppvMemBlock, cmock_size) eMpblibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, cmock_size)
void eMpblibsMalloc_CMockReturnMemThruPtr_ppvMemBlock(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int cmock_size);
#define eMpblibsMalloc_IgnoreArg_ppvMemBlock() eMpblibsMalloc_CMockIgnoreArg_ppvMemBlock(__LINE__)
void eMpblibsMalloc_CMockIgnoreArg_ppvMemBlock(UNITY_LINE_TYPE cmock_line);
#define eMpblibsMalloc_IgnoreArg_xSize() eMpblibsMalloc_CMockIgnoreArg_xSize(__LINE__)
void eMpblibsMalloc_CMockIgnoreArg_xSize(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRealloc_IgnoreAndReturn(cmock_retval) eMpblibsRealloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpblibsRealloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsRealloc_ExpectAnyArgsAndReturn(cmock_retval) eMpblibsRealloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpblibsRealloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpblibsRealloc_ExpectAndReturn(ppvMemBlock, xSize, cmock_retval) eMpblibsRealloc_CMockExpectAndReturn(__LINE__, ppvMemBlock, xSize, cmock_retval)
void eMpblibsRealloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, size_t xSize, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpblibsRealloc_CALLBACK)(void** ppvMemBlock, size_t xSize, int cmock_num_calls);
void eMpblibsRealloc_StubWithCallback(CMOCK_eMpblibsRealloc_CALLBACK Callback);
#define eMpblibsRealloc_ExpectWithArrayAndReturn(ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval) eMpblibsRealloc_CMockExpectWithArrayAndReturn(__LINE__, ppvMemBlock, ppvMemBlock_Depth, xSize, cmock_retval)
void eMpblibsRealloc_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int ppvMemBlock_Depth, size_t xSize, eMpbError_t cmock_to_return);
#define eMpblibsRealloc_ReturnThruPtr_ppvMemBlock(ppvMemBlock) eMpblibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, sizeof(*ppvMemBlock))
#define eMpblibsRealloc_ReturnArrayThruPtr_ppvMemBlock(ppvMemBlock, cmock_len) eMpblibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, (int)(cmock_len * (int)sizeof(*ppvMemBlock)))
#define eMpblibsRealloc_ReturnMemThruPtr_ppvMemBlock(ppvMemBlock, cmock_size) eMpblibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, cmock_size)
void eMpblibsRealloc_CMockReturnMemThruPtr_ppvMemBlock(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int cmock_size);
#define eMpblibsRealloc_IgnoreArg_ppvMemBlock() eMpblibsRealloc_CMockIgnoreArg_ppvMemBlock(__LINE__)
void eMpblibsRealloc_CMockIgnoreArg_ppvMemBlock(UNITY_LINE_TYPE cmock_line);
#define eMpblibsRealloc_IgnoreArg_xSize() eMpblibsRealloc_CMockIgnoreArg_xSize(__LINE__)
void eMpblibsRealloc_CMockIgnoreArg_xSize(UNITY_LINE_TYPE cmock_line);
#define vMpblibsFree_Ignore() vMpblibsFree_CMockIgnore()
void vMpblibsFree_CMockIgnore(void);
#define vMpblibsFree_ExpectAnyArgs() vMpblibsFree_CMockExpectAnyArgs(__LINE__)
void vMpblibsFree_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpblibsFree_Expect(ppvMemBlock) vMpblibsFree_CMockExpect(__LINE__, ppvMemBlock)
void vMpblibsFree_CMockExpect(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock);
typedef void (* CMOCK_vMpblibsFree_CALLBACK)(void** ppvMemBlock, int cmock_num_calls);
void vMpblibsFree_StubWithCallback(CMOCK_vMpblibsFree_CALLBACK Callback);
#define vMpblibsFree_ExpectWithArray(ppvMemBlock, ppvMemBlock_Depth) vMpblibsFree_CMockExpectWithArray(__LINE__, ppvMemBlock, ppvMemBlock_Depth)
void vMpblibsFree_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int ppvMemBlock_Depth);
#define vMpblibsFree_ReturnThruPtr_ppvMemBlock(ppvMemBlock) vMpblibsFree_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, sizeof(*ppvMemBlock))
#define vMpblibsFree_ReturnArrayThruPtr_ppvMemBlock(ppvMemBlock, cmock_len) vMpblibsFree_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, (int)(cmock_len * (int)sizeof(*ppvMemBlock)))
#define vMpblibsFree_ReturnMemThruPtr_ppvMemBlock(ppvMemBlock, cmock_size) vMpblibsFree_CMockReturnMemThruPtr_ppvMemBlock(__LINE__, ppvMemBlock, cmock_size)
void vMpblibsFree_CMockReturnMemThruPtr_ppvMemBlock(UNITY_LINE_TYPE cmock_line, void** ppvMemBlock, int cmock_size);
#define vMpblibsFree_IgnoreArg_ppvMemBlock() vMpblibsFree_CMockIgnoreArg_ppvMemBlock(__LINE__)
void vMpblibsFree_CMockIgnoreArg_ppvMemBlock(UNITY_LINE_TYPE cmock_line);
#define xMpblibsGetFreeHeapSize_IgnoreAndReturn(cmock_retval) xMpblibsGetFreeHeapSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xMpblibsGetFreeHeapSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xMpblibsGetFreeHeapSize_ExpectAnyArgsAndReturn(cmock_retval) xMpblibsGetFreeHeapSize_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xMpblibsGetFreeHeapSize_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xMpblibsGetFreeHeapSize_ExpectAndReturn(cmock_retval) xMpblibsGetFreeHeapSize_CMockExpectAndReturn(__LINE__, cmock_retval)
void xMpblibsGetFreeHeapSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
typedef size_t (* CMOCK_xMpblibsGetFreeHeapSize_CALLBACK)(int cmock_num_calls);
void xMpblibsGetFreeHeapSize_StubWithCallback(CMOCK_xMpblibsGetFreeHeapSize_CALLBACK Callback);
#define xMpblibsGetMinEverFreeHeapSize_IgnoreAndReturn(cmock_retval) xMpblibsGetMinEverFreeHeapSize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xMpblibsGetMinEverFreeHeapSize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xMpblibsGetMinEverFreeHeapSize_ExpectAnyArgsAndReturn(cmock_retval) xMpblibsGetMinEverFreeHeapSize_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xMpblibsGetMinEverFreeHeapSize_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xMpblibsGetMinEverFreeHeapSize_ExpectAndReturn(cmock_retval) xMpblibsGetMinEverFreeHeapSize_CMockExpectAndReturn(__LINE__, cmock_retval)
void xMpblibsGetMinEverFreeHeapSize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
typedef size_t (* CMOCK_xMpblibsGetMinEverFreeHeapSize_CALLBACK)(int cmock_num_calls);
void xMpblibsGetMinEverFreeHeapSize_StubWithCallback(CMOCK_xMpblibsGetMinEverFreeHeapSize_CALLBACK Callback);
#define pvMpblibsHeapPtr_IgnoreAndReturn(cmock_retval) pvMpblibsHeapPtr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pvMpblibsHeapPtr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvMpblibsHeapPtr_ExpectAnyArgsAndReturn(cmock_retval) pvMpblibsHeapPtr_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pvMpblibsHeapPtr_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvMpblibsHeapPtr_ExpectAndReturn(cmock_retval) pvMpblibsHeapPtr_CMockExpectAndReturn(__LINE__, cmock_retval)
void pvMpblibsHeapPtr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
typedef void* (* CMOCK_pvMpblibsHeapPtr_CALLBACK)(int cmock_num_calls);
void pvMpblibsHeapPtr_StubWithCallback(CMOCK_pvMpblibsHeapPtr_CALLBACK Callback);
#define vMpblibsMallocFailedHook_Ignore() vMpblibsMallocFailedHook_CMockIgnore()
void vMpblibsMallocFailedHook_CMockIgnore(void);
#define vMpblibsMallocFailedHook_ExpectAnyArgs() vMpblibsMallocFailedHook_CMockExpectAnyArgs(__LINE__)
void vMpblibsMallocFailedHook_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpblibsMallocFailedHook_Expect(xSizeRequired) vMpblibsMallocFailedHook_CMockExpect(__LINE__, xSizeRequired)
void vMpblibsMallocFailedHook_CMockExpect(UNITY_LINE_TYPE cmock_line, size_t xSizeRequired);
typedef void (* CMOCK_vMpblibsMallocFailedHook_CALLBACK)(size_t xSizeRequired, int cmock_num_calls);
void vMpblibsMallocFailedHook_StubWithCallback(CMOCK_vMpblibsMallocFailedHook_CALLBACK Callback);
#define vMpblibsMallocFailedHook_IgnoreArg_xSizeRequired() vMpblibsMallocFailedHook_CMockIgnoreArg_xSizeRequired(__LINE__)
void vMpblibsMallocFailedHook_CMockIgnoreArg_xSizeRequired(UNITY_LINE_TYPE cmock_line);
#define vMpblibsAssertFailed_Ignore() vMpblibsAssertFailed_CMockIgnore()
void vMpblibsAssertFailed_CMockIgnore(void);
#define vMpblibsAssertFailed_ExpectAnyArgs() vMpblibsAssertFailed_CMockExpectAnyArgs(__LINE__)
void vMpblibsAssertFailed_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vMpblibsAssertFailed_Expect(func, file, line) vMpblibsAssertFailed_CMockExpect(__LINE__, func, file, line)
void vMpblibsAssertFailed_CMockExpect(UNITY_LINE_TYPE cmock_line, char const* func, char const* file, int line);
typedef void (* CMOCK_vMpblibsAssertFailed_CALLBACK)(char const* func, char const* file, int line, int cmock_num_calls);
void vMpblibsAssertFailed_StubWithCallback(CMOCK_vMpblibsAssertFailed_CALLBACK Callback);
#define vMpblibsAssertFailed_IgnoreArg_func() vMpblibsAssertFailed_CMockIgnoreArg_func(__LINE__)
void vMpblibsAssertFailed_CMockIgnoreArg_func(UNITY_LINE_TYPE cmock_line);
#define vMpblibsAssertFailed_IgnoreArg_file() vMpblibsAssertFailed_CMockIgnoreArg_file(__LINE__)
void vMpblibsAssertFailed_CMockIgnoreArg_file(UNITY_LINE_TYPE cmock_line);
#define vMpblibsAssertFailed_IgnoreArg_line() vMpblibsAssertFailed_CMockIgnoreArg_line(__LINE__)
void vMpblibsAssertFailed_CMockIgnoreArg_line(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
