L 1 "Thermistor\Sources\thermistorCircuitUtil.c"
N/**
N* @file 		thermistorCircuitUtil.c
N* @brief			
N* @author		juan
N* @date			Created on 2021-3-9
N* @note
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N
N/* Includes ----------------------------------------------------------------- */
N#include "thermistorCircuitUtil.h"
L 1 ".\Thermistor\Includes\thermistorCircuitUtil.h" 1
N/**
N* @file			thermistorCircuitUtil.h
N* @brief
N* @author		juan
N* @date			Created on 2021-3-9
N* @note
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __THERMISTORCIRCUITUTIL_H
N#define __THERMISTORCIRCUITUTIL_H
N/* Includes ----------------------------------------------------------------- */
N#include "thermistorCircuit.h"
L 1 ".\Thermistor\Includes\thermistorCircuit.h" 1
N/**
N* @file			thermistorCircuit.h
N* @brief		thermistorCircuit header file.
N* @author		juan
N* @date			Created on 2021-03-09
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __THERMISTORCIRCUIT_H
N#define __THERMISTORCIRCUIT_H
N/* Includes ----------------------------------------------------------------- */
N#include "thermistor.h"
L 1 ".\Thermistor\Includes\thermistor.h" 1
N/**
N* @file           thermistor.h
N* @brief          Thermistor header file.
N* @author         juan andres
N* @date           Created on 2021- 03 -5 
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N
N/**
N@page ThermistorCircuit
N\verbatim
N
N            R1                R2
N    o-----/\/\/\------------/\/\/\------- A
N											|
N											|         
N											/         
Nv1										\ Rt    
N											/         
N											|         
N											|         
N											|    
N o-----------------------------------------B
N											|
N										GND
N
N\endverbatim
N **/
N
N/* Header guard ------------------------------------------------------------- */
N#ifndef __THERMISTOR_H
N#define __THERMISTOR_H
N
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
L 1 "..\commun\Includes\mpblibs.h" 1
N/**
N* @file			mpblibs.h
N* @brief		This header provides common definitions needed mpb library
N* @description
N* @author	        juan
N* @date			Created on 2021-03-1
N* @note			indent using tab size : 4
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 Mpb, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of NEPTRONIC.</center>
N*
N*/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBLIBS_H
N#define __MPBLIBS_H
N
N/* Includes ----------------------------------------------------------------- */
N
N/* Standard library headers */
N#include <stdint.h> /* for integer types and their limits */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 25 "..\commun\Includes\mpblibs.h" 2
N#include <stdlib.h> /* for NULL, size_t, atoi(), div(), malloc, etc */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060044
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
S      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 26 "..\commun\Includes\mpblibs.h" 2
N#include <string.h> /* for NULL, size_t, mem* and str* functions */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 27 "..\commun\Includes\mpblibs.h" 2
N#include <stdarg.h> /* for variable arguments, va_start, va_arg */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 28 "..\commun\Includes\mpblibs.h" 2
N#include <stddef.h> /* for NULL, size_t, etc */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 29 "..\commun\Includes\mpblibs.h" 2
N
N
N
N/* Typedef ------------------------------------------------------------------ */
N
N/**
N* @brief Mpb defined error codes
N*/
Ntypedef enum
N{
N	eSuccess				    =  0,
N	eInvalidParameter           = -1,
N	eAccessDenied			    = -2,
N	eBusy	 		    		= -3,
N	eTimeout	 		    	= -4,
N    eBufferEmpty                = -5,
N	eBufferFull		          	= -6,
N	eBufferOverflow		    	= -7,
N	eOutOfMemory			    = -8,
N	eCheckFailed	 			= -9,
N	eCorrupted	 		    	= -10,
N	eOutOfRange	 		    	= -11,
N	eNotFound	 		    	= -12,
N	eInvalidObject			    = -13,
N	eNotDiscarded		    	= -14,
N	eNotRegistered			    = -15,
N	ePropertyNotSuported	    = -16,
N	eObjectTypeNotSuported	    = -17,
N	eDriverError 				= -18,
N	eUnknownError	    	    = -19,
N    eInternalDeviceError        = -20
N}
NeMpbError_t;
N
N/**
N* @brief	Mpbtronic define access
N*/
Ntypedef enum
N{
N	eREAD_ACCESS = 0,
N	eWRITE_ACCESS = 1,
N}
NeAccess_t;
N
N/**
N* @brief boolean definition
N*/
Ntypedef enum
N{
N	eFalse 		= 0,
N	eTrue		= !eFalse,
N}
NeBool_t;
N
N/**
N* @brief	user define handle
N*/
Ntypedef uint32_t	handle_t;
N
N/* Define ------------------------------------------------------------------- */
N
N/* todo : à déplacer dans  mpblibsconfig.h */
N#define USE_HEAP
N#define USE_NEP_HEAP
N#define USE_MALLOC_FAILED_HOOK
N//#define USE_ASSERT_FAILED
N#define eMpbATTR_PACKED			        __packed
N
N
N/* Exported macro ----------------------------------------------------------- */
N
N/**
N* @brief	
N*/
N#ifdef __ICCARM__ 
S#include <intrinsics.h>
S#define __nop()     __no_operation()
N#else
N#define __nop()
N#endif
N
N/* Exported enum ------------------------------------------------------------ */
N
N/* Exported struct ---------------------------------------------------------- */
N
N/* Global variables --------------------------------------------------------- */
N
N/* Exported function prototypes --------------------------------------------- */
N
N/* SOFTWARE SERVICE GLUE LOGIC */
N
N/**
N* @brief		Delay for the specified number of micro seconds
N* @param 		ulDelay		Blocking delay in micro seconds
N* @note       	Blocking
N*/
Nextern void vMpblibsUsDelay( uint32_t ulDelay );
N
N/* UNIVERSAL SERIAL I/O API GLUE LOGIC for UART, SPI and I2C */
N
N/**
N* @brief		opens, optionally takes control and optionally initializes an peripheral channel
N* @param 		xStream		Application specific peripheral channel identifier
N* @param		ulFlags 	Application specific flags for stream initialization
N* @return		success or librairie error message
N* @note       A peripheral channel can be define by its communication protocole (Modbus_COM1, BACnet_COM1, etc)
N*             or by target external device driver (PCA9555_1, M24C32_1, etc)
N*             This is a good place to add RTOS support for mutex or initialize low level layer.
N* 			eMpb_Open should be called for multiple consecutive access algorithm along with eMpb_Close.
N*/
Nextern eMpbError_t eMpblibsOpen( handle_t xStream, const uint32_t ulFlags );
N
N/**
N* @brief		closes, optionnaly releases control and optionally deinitializes peripheral channel
N* @param 		xStream		Application specific peripheral channel identifier
N* @return		success or librairie error message
N* @note       This is a good place to add RTOS support for mutex.
N* 			eMpb_Open should be called for multiple consecutive access algorithm along with eMpb_Close.
N*/
Nextern eMpbError_t eMpblibsClose( handle_t xStream );
N
N/**
N* @brief		
N* @param 		xStream			Application specific peripheral channel identifier
N* @param		xAddrCmdSize	Size in bytes of Memory Address or Device Command sent at the beginning of transaction. Can be 0.
N* @param 		pvAddrCmd		Pointer to address or command buffer sent. NULL if xAddrCmdSize = 0, else not NULL.
N* @param		pvBuffer		Pointer where to receive read data
N* @param 		xBytes			Number of bytes to be read
N* @param		pxBytesRead		Pointer where to save number of bytes read. Can be NULL.
N* @return		success or librairie error message
N* @note       
N*/
Nextern eMpbError_t eMpblibsRead( handle_t xStream, size_t xAddrCmdSize, const void *pvAddrCmd, void * const pvBuffer, const size_t xBytes, size_t *pxBytesRead );
N
N/**
N* @brief		
N* @param 		xStream			Application specific peripheral channel identifier
N* @param		xAddrCmdSize	Size in bytes of Memory Address or Device Command sent at the beginning of transaction. Can be 0.
N* @param 		pvAddrCmd		Pointer to address or command buffer sent. NULL if xAddrCmdSize = 0, else not NULL.
N* @param		pvBuffer		Pointer on data to be written
N* @param 		xBytes			number of bytes to be written
N* @param		pxBytesRead		Pointer where to save number of bytes written. Can be NULL.
N* @return		success or librairie error message
N* @note       
N*/
Nextern eMpbError_t eMpblibsWrite( handle_t xStream, size_t xAddrCmdSize, const void *pvAddrCmd, const void * pvBuffer, const size_t xBytes, size_t *pxBytesWritten );
N
N/**
N* @brief
N* @param	xStream		Application specific peripheral channel identifier
N* @param	ulRequest	Control Request Identifier. Application Specific.
N* @param	pvValue		pointer on write value or where to save read value.
N* @return	success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsIoCtl( handle_t xStream, uint32_t ulRequest, void *pvValue );
N
N/* OTHER HARDWARE GLUE LOGIC */
N
N/**
N* @brief		
N* @param 		eAccess			Read / Write access request
N* @param 		xI2Cx			I2C peripheral handle, HAL dependant.
N* @param 		DevAddr			Application specific external device address
N* @param		xAddrCmdSize	Size in bytes of Memory Address or Device Command sent at the beginning of transaction. Can be 0.
N* @param 		pvAddrCmd		Pointer to address or command buffer sent. NULL if xAddrCmdSize = 0, else not NULL.
N* @param		pvBuffer		Pointer on data to be written or where to save read bytes
N* @param 		xBytes			number of bytes to be written or read
N* @param		pxBytesRW		Pointer where to save number of bytes written or read. Can be NULL.
N* @return		success or librairie error message
N* @note       
N*/
Nextern eMpbError_t eMpblibsI2CRequest( eAccess_t eAccess, handle_t xI2Cx, uint8_t ucDevAddr, size_t xAddrCmdSize, const void *pvAddrCmd, void *pvBuffer, size_t xBytes, size_t *pxBytesRW );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsSPIBytesReadWrite( handle_t xSPIx, void* const pvBytesOut, void* pvBytesIn, size_t xBytes );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsSPIBlockReadWrite( eAccess_t eAccess, handle_t xSPIx, void *pvBuffer, size_t xBytes, size_t *pxBytesRW );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsUartInit( handle_t xUARTx, handle_t xGPIOx, uint32_t ulPin, uint32_t ulBaudRate, uint8_t ucWordLength, uint8_t ucStopBits, uint8_t ucParity, size_t xSilenceBits, size_t xFrameTimeoutBits );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsUartRead( handle_t xUARTx, void* const pvBuffer, size_t xBytes, size_t *pxBytesRead, uint32_t ulMsTimeout );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsUartWrite( handle_t xUARTx, const void* pvBuffer, size_t xBytes, size_t *pxBytesWritten, uint32_t ulMsTimeout );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsPwrMonInit( void );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsPwrMonWaitPwrUp( void );
N
N/**
N* @brief
N* @return		success or librairie error message
N* @note
N*/
Nextern int sMpblibsPwrMonIsLow( void );
N
N/**
N* @brief			Do a soft reset of the system
N*/
Nextern void vMpblibsPowerMonitorSoftReset( void );
N
N/**
N* @brief
N* @param      xANALOGx		Analog peripheral value handle
N* @param      plReading		Pointer on variable where to save reading value.
N* @param      lResolution	resolution or range in which to return reading
N* @return	  success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsAnalogReadRaw( handle_t xANALOGx, int32_t *plReading );
Nextern eMpbError_t eMpblibsAnalogReadmV( handle_t xANALOGx, int32_t *plReading );
Nextern eMpbError_t eMpblibsAnalogReadRes( handle_t xANALOGx, int32_t lResolution, int32_t *plReading );
N
N/**
N* @brief
N* @param      xANALOGx		Analog peripheral value handle
N* @param      lOutput		value to write to Analog peripheral
N* @param      lResolution	resolution or range of lOutput
N* @return	  success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsAnalogWriteRaw( handle_t xANALOGx, int32_t lOutput );
Nextern eMpbError_t eMpblibsAnalogWritemV( handle_t xANALOGx, int32_t lOutput );
Nextern eMpbError_t eMpblibsAnalogModulationWritemV( handle_t xANALOGx, int32_t lOutput, int32_t lLowOutput );
Nextern eMpbError_t eMpblibsAnalogWriteRes( handle_t xANALOGx, int32_t lResolution, int32_t lOutput );
N
N/**
N* @brief
N* @param      xBINARYx		Binary peripheral value handle
N* @param      peState		Pointer on variable where to save reading value.
N* @param      eState		value to write to binary peripheral
N* @return	  success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsBinaryRead( handle_t xBINARYx, eBool_t* peState );
Nextern eMpbError_t eMpblibsBinaryWrite( handle_t xBINARYx, eBool_t eState );
Nextern eMpbError_t eMpblibsBinaryToggle( handle_t xBINARYx );
N
N#ifdef USE_HEAP
N/**
N* @brief
N* @param      ppvMemBlock	pointer to the memory block pointer
N* @param      xSize			size of the memory block to be allocated
N* @return	  success or librairie error message
N* @note
N*/
Nextern eMpbError_t eMpblibsMalloc( void** ppvMemBlock, size_t xSize );
Nextern eMpbError_t eMpblibsRealloc( void** ppvMemBlock, size_t xSize );
Nextern void vMpblibsFree( void** ppvMemBlock );
Nextern size_t xMpblibsGetFreeHeapSize( void );
Nextern size_t xMpblibsGetMinEverFreeHeapSize( void );
N#ifdef USE_MPB_HEAP
S/**
S* @brief
S* @return	user defined heap pointer
S* @note
S*/
Sextern void* pvMpblibsHeapPtr( void );
N#endif
N#ifdef USE_MALLOC_FAILED_HOOK
Nextern void vMpblibsMallocFailedHook( size_t xSizeRequired );
N#else
S#define vMpblibsMallocFailedHook( expr )			//( (void)0 )
N#endif
N#endif
N
N/**
N* @brief
N* @param      expr	expression to be evaluated
N* @note
N*/
N#ifdef USE_ASSERT_FAILED
S #define vMpblibsAssertParam( expr )					if( (expr) == 0 ) vMpblibsAssertFailed( __func__, __FILE__, __LINE__ )	
S extern void vMpblibsAssertFailed( char const *func, char const *file, int line );
N#else
N #define vMpblibsAssertParam( expr )	        								    //( (void)0 )
N extern void vMpblibsAssertFailed( char const *func, char const *file, int line );	//( (void)0 )
N#endif
N
N/* Header guard ------------------------------------------------------------- */
N#endif
N/*** (C) COPYRIGHT 2021 MPB, Montreal, Quebec, Canada *** END OF FILE ***/
L 42 ".\Thermistor\Includes\thermistor.h" 2
N
N/* Define ------------------------------------------------------------------- */
N#define MAX_NUMBER_OF_POINTS			 				25		  /* Maximum Nb of points in a TempCal list */
N#define NUMBER_OF_POINTS_TO_GET_AVERAGE 	60    /*   Number of Temperature samples to average  */
N
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/**
N* @brief    The type of thermistor
N*/
Ntypedef enum
N{
N	eThermistorType10k = 10000,
N	eThermistorType20k = 20000,
N	eThermistorType30k = 30000,
N}eThermistorType_t;
N
N/**
N* @brief  Structure to associate a temperature to a resistance
N* @note   Temperature value in hundredths of degree celsius (x100)
N**/
Ntypedef struct
N{
N                     		
N    uint16_t 	usResistanceValues[ MAX_NUMBER_OF_POINTS ];    /**< Resistance value in ohms */
X    uint16_t 	usResistanceValues[ 25 ];     
N    int16_t  	ssTemperatureValues[ MAX_NUMBER_OF_POINTS ];  /**< Temperature value in hundredths of degree celsius (x100) */
X    int16_t  	ssTemperatureValues[ 25 ];   
N	  uint8_t 	ucNumberOfPointsUsed;
N} xTemperatureToResistence_t; 
N
N
N
N/* Exported struct ---------------------------------------------------------- */
N
N/**
N* @brief  Structure to associate a temperature to a resistance
N* @note   Temperature value in hundredths of degree celsius (x100)
N**/
Ntypedef struct
N{
N    uint32_t ulResistance;    /**< Resistance value in ohms */
N    int16_t  ssTemperature;   /**< Temperature value in hundredths of degree celsius (x100) */
N}__attribute__((packed))xThermistorTemperature_t;
N
N/**
N* @brief  Circuit configuration structure for temperature control with a
N*         thermistance
N* @note   See @ref ThermistorCircuit
N**/
Ntypedef struct
N{
N    
N    uint32_t ulSeriesResistor1;     /**< Series resistor configuration 1 */
N    uint32_t ulSeriesResistor2;     /**< Series resistor configuration 2 */
N		uint16_t usReferenceVoltagemV;  /**< Voltage Reference in mV */
N}__attribute__((packed))xThermistorCircuitConfig_t;
N
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N* @brief      Initialize the thermistor base circuit structure
N* @param[out] pxThermistorCircuitConfig: Pointer to the circuit
N*             configuration structure
N* @param[in]  ulSeriesResistor1: Resistor next to voltage source
N* @param[in]  ulSeriesResistor2: Resistor next to output voltage 
N* @param[in]  usReferenceVoltagemV: reference voltage in mV
N* @param[in]  usInputVoltagemV: Source voltage in mV
N* @return     Success or library error message
N* @note       Input voltage also can't be 0.
N**/
NeMpbError_t eThermistorInitBaseCircuit( xThermistorCircuitConfig_t *pxThermistorCircuitConfig, uint32_t ulSeriesResistor1, uint32_t ulSeriesResistor2, uint16_t usReferenceVoltagemV );
N
N/**
N* @brief      Get the temperature from the required look-up table using the
N*             ADC value
N* @param[in]  xStream: Application specific peripheral channel identifier
N* @param[in]  xThermistorCircuitConfig: The circuit configuration structure
N* @param[in]  pxTemperatureTable: Pointer to the temperature look-up table
N* @param[in]  ucLength: Temperature look-up table length
N* @param[out] pfTemperature: Pointer to a variable where to save the data
N* @return     Success or library error message
N* @note       Temperature precision is to the hundredths
N**/
NeMpbError_t eThermistorGetTemperatureTable( handle_t xStream, xThermistorCircuitConfig_t xThermistorCircuitConfig, const xThermistorTemperature_t *pxTemperatureTable, uint8_t ucLength, float *pfTemperature );
N
N/**
N* @brief      Get the temperature from the resistor measured and beta coefficient of thermistor
N* @param[in]  xStream: Application specific peripheral channel identifier
N* @param[in]  ulBetaCoefficient: beta coefficient of thermistor
N* @param[in]  xThermistorCircuitConfig: The circuit configuration structure
N* @param[in]  eThermistorType: 10K Thermistor, 20K Thermistor, etc...
N* @param[out] pfTemperature: Pointer to a variable where to save the temperature
N* @return     Success or library error message
N* @note       Temperature resolution is to the hundredths
N* @note       Temperature precision depends on the temperature 
N* @note       https://www.ametherm.com/thermistor/ntc-thermistor-beta
N**/
NeMpbError_t eThermistorGetTemperatureBeta( handle_t xStream, uint32_t ulBetaCoefficient, xThermistorCircuitConfig_t xThermistorCircuitConfig, eThermistorType_t eThermistorType, float *pfTemperature );
N
N/**
N* @brief      Get the temperature from the mpb table method 
N* @param[in]  xStream: Application specific peripheral channel identifier
N* @param[in]  ucLength: Length of the table
N* @param[in]  pxTemperatureTable: Pointer to the temperature look-up table
N* @param[out] pfTemperatureReaded: Pointer to a variable where to save the temperature
N* @return     Success or library error message
N**/
NeMpbError_t eTemperatureAveragingThermistor( handle_t xStream, uint8_t ucLength, const xThermistorTemperature_t *pxTemperatureTable, float *pfTemperatureReaded );
N
N/**
N* @brief      Get the voltage of the thermistor input in mV
N* @param[in]  xStream: Application specific peripheral channel identifier
N* @param[out] pusVoltage: Pointer to store the voltage
N* @return     Success or library error message
N**/
Nextern eMpbError_t eThermistorAnalogReadmV( handle_t xStream, uint16_t *pusVoltage );
N
N/**
N* @brief        Calculate the log of a double for beta calculation
N* @param[in]    dValue: Value that we want the log of
N* @param[out]   pdResult: Result of the log
N* @return       Success or library error message
N*/
Nextern eMpbError_t eThermistorLogarithm( double dValue, double *pdResult );
N
N
N
N
N#endif	/* __THERMISTOR_H */
L 19 ".\Thermistor\Includes\thermistorCircuit.h" 2
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N* @brief        Allows to get the thermistance from the base circuit
N* @param[in]    xStream: Application specific peripheral channel identifier
N* @param[in]    xThermistorCircuitConfig: The circuit configuration structure
N* @param[out]   pulThermistance: The thermistance
N* @return       Success or library error message
N*/
NeMpbError_t eThermistorCircuitGetThermistance( handle_t xStream, xThermistorCircuitConfig_t xThermistorCircuitConfig, uint32_t *pulThermistance );
N
N#endif /* __THERMISTORCIRCUIT_H */
L 20 ".\Thermistor\Includes\thermistorCircuitUtil.h" 2
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N* @brief      Get the temperature from the resistor measured and beta coefficient of thermistor
N* @param[in]  xStream: Application specific peripheral channel identifier
N* @param[in]  xThermistorCircuitConfig: The circuit configuration structure
N* @param[out] pulThermistance: Pointer to a variable where to save the resistance read
N* @return     Success or library error message
N* @note       Temperature precision is to the hundredths
N**/
NeMpbError_t eThermistorCircuitUtilGetThermistanceValue( handle_t xStream, xThermistorCircuitConfig_t xThermistorCircuitConfig, uint32_t *pulThermistance );
N
N
N#endif /* __THERMISTORCIRCUITUTIL_H */
L 18 "Thermistor\Sources\thermistorCircuitUtil.c" 2
N#include "mpbMath.h"
L 1 "..\mpbMath\Includes\mpbMath.h" 1
N/**
N  * @file			MpbMath.h
N  * @brief
N  * @author			juan andres
N  * @date			Created on 2021-03-5
N  * @note
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N*
N**/
N/* Header guard ------------------------------------------------------------- */
N
N#ifndef __MPBMATH_H
N#define __MPBMATH_H
N/* Includes ----------------------------------------------------------------- */
N
N#include "mpbMathAbsolute.h"
L 1 "..\mpbMath\Includes\mpbMathAbsolute.h" 1
N/**
N* @file 		mpbMathAbsolute.h
N* @brief			
N* @author		juan
N* @date			Created on 2021-3-4
N* @note
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHABSOLUTE_H
N#define __MPBMATHABSOLUTE_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
NeMpbError_t eMpbMathAbsoluteSubstractionFloat( float fValue1, float fValue2, float *pfAbsoluteDiffrence );
N
N#endif /* __NEPMATHABSOLUTE_H */
L 23 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathAverage.h"
L 1 "..\mpbMath\Includes\mpbMathAverage.h" 1
N/**
N* @file         nepMathAverage.h
N* @brief        Library to calculate average
N* @author       juan andres
N* @date         Created on 2021-03-4
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHAVERAGE_H
N#define __MPBMATHAVERAGE_H
N
N/* Includes ----------------------------------------------------------------- */
N
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N* @brief        Calculates the average
N* @param[in]    pslArray: Pointer to the array of values to average
N* @param[in]    usLength: Number of values to average
N* @param[out]   pslResult: Pointer to store the average result
N* @return       Success or library error message
N* @note         Signed 32 bits
N**/   
NeMpbError_t	eMpbMathAverageS32( const int32_t *pslArray, uint16_t usLength, int32_t *pslResult );
N
N/**
N* @brief        Calculates the average
N* @param[in]    pxArray: Pointer to the array of values to average
N* @param[in]    usLength: Number of values to average
N* @param[out]   pxResult: Pointer to store the average result
N* @return       Success or library error message
N* @note         Float
N**/   
NeMpbError_t	eMpbMathAverageFloat( const float *pxArray, uint16_t usLength, float *pxResult );
N
N#endif /* __MPBMATHAVERAGE_H */
L 24 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathCoerce.h"
L 1 "..\mpbMath\Includes\mpbMathCoerce.h" 1
N/**
N  * @file			  mpbMathCoerce.h
N  * @brief			Library to coerce values
N  * @author			juan andres
N  * @date			Created on 2019-04-25
N  * @note
N  * @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHCOERCE_H
N#define __MPBMATHCOERCE_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N///**
N//  * @brief      Coerce a value according to the given minimum and maximum.
N//  *             If the value is lower than the minimum, then the function
N//  *             returns the minimum. If it's higher than the maximum, it
N//  *             returns the maximum. Otherwise, it returns the value itself. 
N//  * @param[in]  slMinimum: Minimum valid value
N//  * @param[in]  slMaximum: Maximum valid value
N//  * @param[in]  slValue: Actual value to coerce
N//  * @return     Coerced value (either slMinimum, slMaximum or slValue)
N//  * @note       Signed 32 bits
N//  **/
N//int32_t slMpbMathCoerce( int32_t slMinimum, int32_t slMaximum, int32_t slValue );
N//
N///**
N//  * @brief      Coerce a value according to the given minimum and maximum.
N//  *             If the value is lower than the minimum, then the function
N//  *             returns the minimum. If it's higher than the maximum, it 
N//  *             returns the maximum. Otherwise, it returns the value itself. 
N//  * @param[in]  ulMinimum: Minimum valid value
N//  * @param[in]  ulMaximum: Maximum valid value
N//  * @param[in]  ulValue: Actual value to coerce
N//  * @return     Coerced value (either ulMinimum, ulMaximum or ulValue)
N//  * @note       Unsigned 32 bits
N//  **/
N//uint32_t ulMpbMathCoerce( uint32_t ulMinimum, uint32_t ulMaximum, uint32_t ulValue );
N
N/**
N  * @brief      Coerce a value according to the given minimum and maximum.
N  *             If the value is lower than the minimum, then the function
N  *             returns the minimum. If it's higher than the maximum, it
N  *             returns the maximum. Otherwise, it returns the value itself. 
N  * @param[in]  xMinimum: Minimum valid value
N  * @param[in]  xMaximum: Maximum valid value
N  * @param[in]  xValue: Actual value to coerce
N  * @return     Coerced value (either xMinimum, xMaximum or xValue)
N  * @note       Float
N  **/
Nfloat xMpbMathCoerceFloat( float xMinimum, float xMaximum, float xValue );
N
N///**
N//  * @brief      Coerce a value according to the given minimum and maximum.
N//  *             If the value is lower than the minimum, then the function
N//  *             returns the minimum. If it's higher than the maximum, it
N//  *             returns the maximum. Otherwise, it returns the value itself. 
N//  * @param[in]  sllMinimum: Minimum valid value
N//  * @param[in]  sllMaximum: Maximum valid value
N//  * @param[in]  sllValue: Actual value to coerce
N//  * @return     Coerced value (either sllMinimum, sllMaximum or sllValue)
N//  * @note       Signed 64 bits
N//  **/
N//int64_t sllMpbMathCoerce( int64_t sllMinimum, int64_t sllMaximum, int64_t sllValue );
N//
N///**
N//  * @brief      Coerce a value according to the given minimum and maximum.
N//  *             If the value is lower than the minimum, then the function
N//  *             returns the minimum. If it's higher than the maximum, it
N//  *             returns the maximum. Otherwise, it returns the value itself. 
N//  * @param[in]  ullMinimum: Minimum valid value
N//  * @param[in]  ullMaximum: Maximum valid value
N//  * @param[in]  ullValue: Actual value to coerce
N//  * @return     Coerced value (either ullMinimum, ullMaximum or ullValue)
N//  * @note       Unsigned 64 bits
N//  **/
N//uint64_t ullMpbMathCoerce( uint64_t ullMinimum, uint64_t ullMaximum, uint64_t ullValue );
N
N///**
N//  * @brief      Coerce a value according to the given minimum and maximum.
N//  *             If the value is lower than the minimum, then the function
N//  *             returns the minimum. If it's higher than the maximum, it
N//  *             returns the maximum. Otherwise, it returns the value itself. 
N//  * @param[in]  scMinimum: Minimum valid value
N//  * @param[in]  scMaximum: Maximum valid value
N//  * @param[in]  scValue: Actual value to coerce
N//  * @return     Coerced value (either scMinimum, scMaximum or scValue)
N//  * @note       Signed 8 bits
N//  **/
N//int8_t scMpbMathCoerce( int8_t scMinimum, int8_t scMaximum, int8_t scValue );
N
N///**
N//  * @brief      Coerce a value according to the given minimum and maximum.
N//  *             If the value is lower than the minimum, then the function
N//  *             returns the minimum. If it's higher than the maximum, it
N//  *             returns the maximum. Otherwise, it returns the value itself. 
N//  * @param[in]  ucMinimum: Minimum valid value
N//  * @param[in]  ucMaximum: Maximum valid value
N//  * @param[in]  ucValue: Actual value to coerce
N//  * @return     Coerced value (either ucMinimum, ucMaximum or ucValue)
N//  * @note       Unsigned 8 bits
N//  **/
N//uint8_t ucMpbMathCoerce( uint8_t ucMinimum, uint8_t ucMaximum, uint8_t ucValue );
N
N#endif /* __MpbMATHCOERCE_H */
L 25 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathCrc.h"
L 1 "..\mpbMath\Includes\mpbMathCrc.h" 1
N/**
N  * @file			  mpbMathCrc.h
N  * @brief			mpbMathCrc header file.
N  * @author			Juan Andres Castano
N  * @date			Created on 2021-3-5
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N
N#ifndef __MPBMATH_CRC_H
N#define __MPBMATH_CRC_H
N
N/* Includes ----------------------------------------------------------------- */
N
N#include "mpbMathCrcUtil.h"
L 1 "..\mpbMath\Includes\mpbMathCrcUtil.h" 1
N/**
N  * @file			 mpbMathCrcUtil.h
N  * @brief     mpbMathCrcUtil header file.
N  * @author		 juan andres
N  * @date			Created on 2021/3/5  
N	* @copyright mpb, Montreal, Qc
N	* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N	* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N	* <center>This document contains confidential and proprietary information
N	* of MPB (subject to a non-disclosure agreement) and shall</center>
N	* <center>not be disclosed, distributed, or reproduced in whole or in
N	* part, without the prior written authorization of MPB.</center>
N	**/
N/* Header guard ------------------------------------------------------------- */
N
N#ifndef __MPBMATH_CRC_UTIL_H
N#define __MPBMATH_CRC_UTIL_H
N
N/* Includes ----------------------------------------------------------------- */
N
N#include "mpblibs.h"
N
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N  * @brief          Calcul reflecting value of a number.
N  * @param[in]      ucNumberOfBits: Number of bits.
N  * @param[in]      ulData: Value of number.
N  * @param[out]     pulResult: Pointer on reflected result.
N  */
Nvoid vMpbMathCrcUtilReflectData( uint8_t ucNumberOfBits, uint32_t ulData, uint32_t *pulResult );
N
N/**
N  * @brief          Calcul reflecting value of a byte.
N  * @param[in]      ulNumberOfBytes: Number of bytes.
N  * @param[in]      pucBuffer: Buffer of bytes.
N  * @param[out]     pucResult: Pointer on reflected result.
N  */
Nvoid vMpbMathCrcUtilReflectBytes( uint32_t ulNumberOfBytes, const uint8_t* pucBuffer, uint8_t* pucResult );
N
N/**
N  * @brief          Calculate a CRC value.
N  * @param[in]      ucWidth: width of CRC.
N  * @param[in]      ulInitial: Initial value of CRC.
N  * @param[in]      ulPolynomial: Polynomial reference.
N  * @param[in]      ulNumberOfBytes: Number of bytes of buffer.
N  * @param[in]      pucBuffer: Data buffer.
N  * @param[out]     pulCrcValue: Pointer on a CRC value.
N  * @return         State of function.
N  **/
Nvoid vMpbMathCrcUtilCalculate( uint8_t ucWidth, uint32_t ulInitial, uint32_t ulPolynomial, uint32_t ulNumberOfBytes, const uint8_t* pucBuffer, uint32_t *pulCrcValue );
N
N#endif /* __MPBATH_CRC_UTIL_H */
L 22 "..\mpbMath\Includes\mpbMathCrc.h" 2
N
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N//uint8_t ucWidth, uint32_t ulInitial, 	uint32_t ulPolynomial, uint32_t ulXorOutput, eBool_t bRefInput, eBool_t bRefOutput, xMpbCrc_t *pxMpbCrc
N#define MPBPMATH_CRC_8_INIT( pxMpbCrc )           eMpbMathCrcInit( 8,        0x00,       0x07,       0x00, eFalse, eFalse, pxMpbCrc );  
N#define MPBMATH_CRC_16_INIT( pxMpbCrc )          eMpbMathCrcInit( 16,     0xFFFF,     0x1021,     0x0000,  eFalse, eFalse, pxMpbCrc );      
N#define MPBMATH_CRC_16_MODBUS_INIT( pxMpbCrc )   eMpbMathCrcInit( 16,     0xFFFF,     0x8005,     0x0000,  eTrue,  eTrue, pxMpbCrc );                
N#define MPBMATH_CRC_32_INIT( pxMpbCrc )          eMpbMathCrcInit( 32, 0xFFFFFFFF,  0x4C11DB7, 0xFFFFFFFF,  eTrue,  eTrue, pxMpbCrc );          
N#define MPBMATH_CRC_32D_INIT( pxMpbCrc )         eMpbMathCrcInit( 32, 0xFFFFFFFF, 0xA833982B, 0xFFFFFFFF,  eTrue,  eTrue, pxMpbCrc );
N      
N			 
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N
N/**
N  * @brief CRC's Structure of Data
N  */
Ntypedef struct
N{
N    uint8_t  ucWidth;
N  	uint32_t ulPolynomial;
N		uint32_t ulInitial;
N    uint32_t ulXorOutput;
N    uint32_t ulResidue;
N    eBool_t bRefInput;
N		eBool_t bRefOutput;
N}
NxMpbCrc_t;
N
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N  * @brief          Initialization of CRC structure.
N  * @param[in]      ucWidth: width of CRC.
N  * @param[in]      ulInitial: Initial value of CRC ( preset ).
N  * @param[in]      ulPolynomial: Polynomial representation.
N  * @param[in]      ulXorOutput: ouPut Xored.
N  * @param[in]      bRefInput: If data input will be reflected.
N  * @param[in]      bRefOutput: If data outputy will be reflected.
N  * @param[out]     pxMpbCrc: Pointer on a CRC structure.
N  * @return         State of function.
N  */
NeMpbError_t eMpbMathCrcInit( uint8_t ucWidth, uint32_t ulInitial, uint32_t ulPolynomial, uint32_t ulXorOutput, eBool_t bRefInput, eBool_t bRefOutput, xMpbCrc_t *pxMpbCrc );
N
N/**
N  * @brief          Validate a CRC reception.
N  * @param[in]      xMpbCrc: CRC structure.
N  * @param[in]      ulCrcRead: CRC received.
N  * @param[in]      ulNumberOfBytes: Number of bytes in data table.	
N  * @param[in]      pucBuffer: Buffer which will be calculate.
N  * @return         State of function.
N  **/
NeMpbError_t eMpbMathCrcValidate( xMpbCrc_t xMpbCrc, uint32_t ulCrcRead, uint32_t ulNumberOfBytes, const uint8_t *pucBuffer );
N
N/**
N  * @brief          Calculate a CRC value.
N  * @param[in]      xMpbCrc: CRC structure.
N  * @param[in]      ulNumberOfBytes: Number of bytes in data table.	
N  * @param[in]      pucBuffer: Buffer which will be calculate.
N  * @param[out]     pulCrcValue: Pointer on a CRC value.
N  * @return         State of function.
N  **/
NeMpbError_t eMpbMathCrcCalculate( xMpbCrc_t xMpbCrc, uint32_t ulNumberOfBytes, const uint8_t* pucBuffer, uint32_t *pulCrcValue );
N
N
N#endif /* __MpbMATH_CRC_H */
L 26 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathDebounce.h"
L 1 "..\mpbMath\Includes\mpbMathDebounce.h" 1
N/**
N* @file			mpbMathDebounce.h
N* @brief
N* @author		juan andres
N* @date			Created on 2021-11-18
N* @note
N* @copyright MPB, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N*
N**/
N 
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHDEBOUNCE_H
N#define __MPBMATHDEBOUNCE_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N
N/**
N* @brief	Structure to debounce a AC/DC signal
N*/
Ntypedef struct
N{
N	uint32_t		ulOffCount; /**< the number of consecutive value for the state to be considered off */
N	uint32_t		ulOnCount;	/**< the number of consecutive value for the state to be considered on */
N	uint32_t		ulCount;						/**< the number of consecutive value */
N	eBool_t			bNewProbablyState; 	/**< the new state */
N	eBool_t			bActualState;			/**< the actual real state */
N}
NMpbMathDebounce_t;
N
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N
N/**
N* @brief		Initialize the debounce structure
N* @param[in]	ulOnCount: the number of on count desired
N* @param[in]	ulOffCount: the number of off count desired
N* @param[in]	slValue: the inital value
N* @param[out]	pxMpbMathDebounce: the initialize debounce structure
N*/
NeMpbError_t vMpbMathDebounceInit( MpbMathDebounce_t *pxMpbMathDebounce, uint32_t ulOnCount, uint32_t ulOffCount, eBool_t bInitialState );
N
N/**
N* @brief		Updates the state of the debounce
N* @param[in]	pxMpbMathDebounce: the debounce structure
N* @param[in]	slValue: the new value
N* @param[out]	pslState: the debounce state
N*/
NeMpbError_t vMpbMathDebounceUpdate( MpbMathDebounce_t *pxMpbMathDebounce, eBool_t bActualState, eBool_t *pbFinalState );
N
N#endif /* __MPBMATHDEBOUNCE_H */
L 27 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathDivision.h"
L 1 "..\mpbMath\Includes\mpbMathDivision.h" 1
N/**
N  * @file			  mpbMathDivision.h
N  * @brief			Library to calculate divisions
N  * @author			Juan andres
N  * @date			Created on 2021-03-4
N  * @note
N  * @copyright Mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHDIVISION_H
N#define __MPBMATHDIVISION_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N
N/**
N  * @brief      Divide two values together, avoiding infinity and NaN results
N  * @param[in]  slNumerator: Numerator of the division
N  * @param[in]  slDenominator: Denominator of the division
N  * @param[out] pslResult: Pointer to store the division result
N  * @return     Success or library error message
N  * @note       Signed 32 bits. This function rounds up.
N  **/
NeMpbError_t eMpbMathDivisionS32( int32_t slNumerator, int32_t slDenominator, int32_t *pslResult );
N
N/**
N  * @brief      Divide two values together, avoiding infinity and NaN results
N  * @param[in]  ulNumerator: Numerator of the division
N  * @param[in]  ulDenominator: Denominator of the division
N  * @param[out] pulResult: Pointer to store the division result
N  * @return     Success or library error message
N  * @note       Unsigned 32 bits. This function rounds up.
N  **/
NeMpbError_t eMpbMathDivisionU32( uint32_t ulNumerator, uint32_t ulDenominator, uint32_t *pulResult );
N
N/**
N  * @brief      Divide two float values together, avoiding infinity and NaN
N  *             results
N  * @param[in]  fNumerator: Numerator of the division
N  * @param[in]  fDenominator: Denominator of the division
N  * @param[out] pfResult: Pointer to store the division result
N  * @return     Success or library error message
N  * @note       Float. This function rounds up at the sixth decimal.
N  **/
NeMpbError_t eMpbMathDivisionFloat( float fNumerator, float fDenominator, float *pfResult );
N
N/**
N  * @brief      Divide two double values together, avoiding infinity and NaN
N  *             results
N  * @param[in]  fdNumerator: Numerator of the division
N  * @param[in]  fdDenominator: Denominator of the division
N  * @param[out] pfdResult: Pointer to store the division result
N  * @return     Success or library error message
N  * @note       Double. This function rounds up at the sixth decimal. 
N  **/
NeMpbError_t eMpbMathDivisionDouble( double fdNumerator, double fdDenominator, double *pfdResult );
N
N/**
N  * @brief      Divide two values together, avoiding infinity and NaN results
N  * @param[in]  ullNumerator: Numerator of the division
N  * @param[in]  ullDenominator: Denominator of the division
N  * @param[out] pullResult: Pointer to store the division result
N  * @return     Success or library error message
N  * @note       Unsigned 64 bits. This function rounds up.
N  **/
NeMpbError_t eMpbMathDivisionU64( uint64_t ullNumerator, uint64_t ullDenominator, uint64_t *pullResult );
N
N/**
N  * @brief      Divide two values together, avoiding infinity and NaN results
N  * @param[in]  sllNumerator: Minimum valid value
N  * @param[in]  sllDenominator: Maximum valid value
N  * @param[out] psllResult: Pointer to store the division result
N  * @return     Success or library error message
N  * @note       Signed 64 bits. This function rounds up.
N  **/
NeMpbError_t eMpbMathDivisionS64( int64_t sllNumerator, int64_t sllDenominator, int64_t *psllResult );
N
N#endif /* __MPBMATHDIVISION_H */
L 28 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathFifo.h"
L 1 "..\mpbMath\Includes\mpbMathFifo.h" 1
N/**
N  * @file			nepMathFifo.h
N  * @brief			Provides functions to interface with a FIFO
N  * @author			juan andres
N  * @date			Created on 2021-3-5
N  * @note
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHFIFO_H
N#define __MPBMATHFIFO_H
N
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/**
N* @brief Defines the structures for a FIFO
N*/
Ntypedef struct //eMpbATTR_PACKED
N{
N	eBool_t	 bFull;		/**< Indicates if the FIFO is full */
N	uint16_t usPush; 	/**< Push index */
N	uint16_t usPop;  	/**< Pop index */     
N	uint16_t usSize; 	/**< Size of the FIFO*/
N	void*    pvBuf;  	/**< Pointer to the FIFO */
N}__attribute__ ((packed))xMpbMathFifo_t;
N
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N* @brief		Initialize the Fifo structure
N* @param[in]    pxFifo: Fifo structure
N* @param[in]    usSize: Fifo byte size
N* @param[in]    pvBuf: Memory buffer
N* @return       Success or librairie error message
N*/
NeMpbError_t eMpbMathFifoInit( xMpbMathFifo_t *pxFifo, uint16_t usSize, void *pvBuf );
N
N/**
N* @brief		Reset the Fifo index
N* @param[in]    pxFifo: Fifo structure
N* @return		Success or librairie error message 
N*/
NeMpbError_t eMpbMathFifoReset( xMpbMathFifo_t *pxFifo );
N
N/**
N* @brief		    Push [usLen] bytes in a FIFO
N* @param[in,out]	pxFifo: Fifo structure
N* @param[out]	    pvData: Pointer to the data to be pushed
N* @param[in]	    usLen: Number of bytes of data to push
N* @param[in]	    eOverwrite: Overwrite memory if full (1)eTrue or not (0)eFalse
N* @return		    Success or librairie error message
N*/
NeMpbError_t	eMpbMathFifoPush( xMpbMathFifo_t * pxFifo, const void * pvData, uint16_t usLen, eBool_t eOverwrite );
N
N/**
N* @brief		    Pop data from a FIFO. This function frees the first [usLen] bytes 
N*				    of a FIFO, and copies them in pvData.
N* @param[in,out]	pxFifo: Fifo structure
N* @param[out]	    pvData: Pointer to the data to be copied
N* @param[in]	    usLen: Number of bytes of data to Pop
N* @return	        Success or librairie error message
N**/
NeMpbError_t	eMpbMathFifoPop( xMpbMathFifo_t * pxFifo, void * pvData, uint16_t usLen );
N
N/**
N* @brief		Peak data from a FIFO. This function copies in pvData the first  
N*				[usLen] bytes of a FIFO, and counts the numbers of bytes read/copied
N*				with ulBytesRead
N* @param[in]	pxFifo: Fifo structure
N* @param[out]	pvData: Pointer to the data to be copied
N* @param[in]	usLen: Number of bytes of data to Peak
N* @param[out]	ulBytesRead: Number of bytes of data read/copied
N* @return	    Success or librairie error message
N*/
NeMpbError_t	eMpbMathFifoPeak( xMpbMathFifo_t * pxFifo, void * pvData, uint16_t usLen, uint32_t * ulBytesRead );
N
N/**
N* @brief	    This function verifies if the Fifo is full
N* @param[in]	pxFifo: Fifo structure
N* @param[out]	peFifoIsFull: eTrue if Fifo is full else eFalse
N* @return	    Success or librairie error message
N*/
NeMpbError_t eMpbMathFifoIsFull( xMpbMathFifo_t *pxFifo, eBool_t *peFifoIsFull );
N
N/**
N* @brief		This function verifies if the Fifo is empty.
N* @param[in]	pxFifo: Fifo structure
N* @param[out]	peFifoIsEmpty: eTrue if Fifo is empty else eFalse
N* @return		Success or librairie error message
N*/
NeMpbError_t eMpbMathFifoIsEmpty( xMpbMathFifo_t *pxFifo, eBool_t *peFifoIsEmpty );
N
N#endif /* __MPBMATHFIFO_H */
L 29 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathLinearApprox.h"
L 1 "..\mpbMath\Includes\mpbMathLinearApprox.h" 1
N/**
N  * @file			 mpbMathLinearApprox.h
N  * @brief			Library to calculate linear approximation
N  * @author		juan andres
N  * @date			Created on 2021-03-5
N  * @note
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHLINEARAPPROX_H
N#define __MPBMATHLINEARAPPROX_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
Ntypedef enum
N{
N	eMpbMathCoerce = 0,
N	eMpbMathNoCoerce,
N}eMpbCoerce_t;
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N///**
N//  * @brief      Approximates the value of a function at a given point according
N//  *             to two coordinates. It is possible to coerce this function
N//  *             in order to avoid extrapolating outside of the coordinates.
N//  * @param[in]  slCoordinate1X: Value of the first coordinate abscissa
N//  * @param[in]  slCoordinate1Y: Value of the first coordinate ordinate
N//  * @param[in]  slCoordinate2X: Value of the second coordinate abscissa
N//  * @param[in]  slCoordinate2Y: Value of the second coordinate ordinate
N//  * @param[in]  slApproxCoordinateX: Value of the coordinate abscissa to
N//  *             approximate
N//  * @param[in]  eCoerce: Parameter to coerce the result between to the two
N//  *             coordinates or not (eMpbMathCoerce or eMpbMathNoCoerce)
N//  * @param[out] pslApproxCoordinateY: Pointer to store the coordinate ordinate
N//  *             approximation
N//  * @return     Success or library error message
N//  * @note       Signed 32 bits
N//  **/
N//eMpbError_t eMpbMathLinearApproxS32( int32_t slCoordinate1X, int32_t slCoordinate1Y, int32_t slCoordinate2X, int32_t slCoordinate2Y, int32_t slApproxCoordinateX, eMpbCoerce_t eCoerce, int32_t *pslApproxCoordinateY );
N
N///**
N//  * @brief      Approximates the value of a function at a given point according
N//  *             to two coordinates. It is possible to coerce this function
N//  *             in order to avoid extrapolating outside of the coordinates.
N//  * @param[in]  sllCoordinate1X: Value of the first coordinate abscissa
N//  * @param[in]  sllCoordinate1Y: Value of the first coordinate ordinate
N//  * @param[in]  sllCoordinate2X: Value of the second coordinate abscissa
N//  * @param[in]  sllCoordinate2Y: Value of the second coordinate ordinate
N//  * @param[in]  sllApproxCoordinateX: Value of the coordinate abscissa to
N//  *             approximate
N//  * @param[in]  eCoerce: Parameter to coerce the result between to the two
N//  *             coordinates or not (eMpbMathCoerce or eMpbMathNoCoerce)
N//  * @param[out] psllApproxCoordinateY: Pointer to store the coordinate ordinate
N//  *             approximation
N//  * @return     Success or library error message
N//  * @note       Signed 64 bits
N//  **/
N//eMpbError_t eMpbMathLinearApproxS64( int64_t sllCoordinate1X, int64_t sllCoordinate1Y, int64_t sllCoordinate2X, int64_t sllCoordinate2Y, int64_t sllApproxCoordinateX, eMpbCoerce_t eCoerce, int64_t *psllApproxCoordinateY );
N
N/**
N  * @brief      Approximates the value of a function at a given point according
N  *             to two coordinates. It is possible to coerce this function
N  *             in order to avoid extrapolating outside of the coordinates.
N  * @param[in]  xCoordinate1X: Value of the first coordinate abscissa
N  * @param[in]  xCoordinate1Y: Value of the first coordinate ordinate
N  * @param[in]  xCoordinate2X: Value of the second coordinate abscissa
N  * @param[in]  xCoordinate2Y: Value of the second coordinate ordinate
N  * @param[in]  xApproxCoordinateX: Value of the coordinate abscissa to
N  *             approximate
N  * @param[in]  eCoerce: Parameter to coerce the result between to the two
N  *             coordinates or not (eMpbMathCoerce or eMpbMathNoCoerce)
N  * @param[out] pxApproxCoordinateY: Pointer to store the coordinate ordinate
N  *             approximation
N  * @return     Success or library error message
N  * @note       Float
N  **/
NeMpbError_t eMpbMathLinearApproxFloat( float xCoordinate1X, float xCoordinate1Y, float xCoordinate2X, float xCoordinate2Y, float xApproxCoordinateX, eMpbCoerce_t eCoerce, float *pxApproxCoordinateY );
N
N
N#endif /* __MPBMATHLINEARAPPROX_H */
L 30 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathResistor.h"
L 1 "..\mpbMath\Includes\mpbMathResistor.h" 1
N/**
N  * @file			 mpbMathResistor.h
N  * @brief			Library for equations involving resistors.
N  * @author		juan andres
N  * @date			Created on 2021-3-5
N  * @note
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N
N/**
N@page NortonEquivalentSchematic
N\verbatim
N
N            R1                R2
N    o-----/\/\/\------------/\/\/\------- A
N											|
N											|         
N											/         
Nv1										\ Rt    
N											/         
N											|         
N											|         
N											|    
N o-----------------------------------------B
N											|
N										GND
N										
Nhttp://hyperphysics.phy-astr.gsu.edu/hbase/electric/Norton.html
N
N\endverbatim
N **/
N 
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHRESISTOR_H
N#define __MPBMATHRESISTOR_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N/**
N* @brief        Calculate the output voltage of a voltage divider.
N* @param[in]    ulPullUpResistor: Resistor at voltage divider input.
N* @param[in]    ulPullDownResistor: Resistance at voltage divider output.
N* @param[in]    ulInputVoltage: Voltage divider input.
N* @param[out]   pulOutputVoltage: Pointer to store the voltage divider output.
N* @return       Success or library error message.
N**/
NeMpbError_t eMpbMathResistorVoltageDividerGetVout( uint32_t ulPullUpResistor, uint32_t ulPullDownResistor, uint32_t ulInputVoltage, uint32_t *pulOutputVoltage );
N
N/**
N* @brief        Calculate the input voltage of a voltage divider.
N* @param[in]    ulPullUpResistor: Resistor at voltage divider input.
N* @param[in]    ulPullDownResistor: Resistance at voltage divider output.
N* @param[in]    ulOutputVoltage: Voltage divider output.
N* @param[out]   pulInputVoltage: Pointer to store the voltage divider input.
N* @return       Success or library error message.
N**/
NeMpbError_t eMpbMathResistorVoltageDividerGetVin( uint32_t ulPullUpResistor, uint32_t ulPullDownResistor, uint32_t ulOutputVoltage, uint32_t *pulInputVoltage );
N
N/**
N* @brief        Calculate the pull up resistor of a voltage divider.
N* @param[in]    ulPullDownResistor: Resistance at voltage divider output.
N* @param[in]    ulInputVoltage: Voltage divider input.
N* @param[in]    ulOutputVoltage: Voltage divider output.
N* @param[out]   pulPullUpResistor: Pointer to store the pull up resistor.
N* @return       Success or library error message.
N**/
NeMpbError_t eMpbMathResistorVoltageDividerGetPullUpResistor( uint32_t ulPullDownResistor, uint32_t ulInputVoltage, uint32_t ulOutputVoltage, uint32_t *pulPullUpResistor );
N
N/**
N* @brief        Calculate the pull down resistor of a voltage divider.
N* @param[in]    ulPullUpResistor: Resistor at voltage divider input.
N* @param[in]    ulInputVoltage: Voltage divider input.
N* @param[in]    ulOutputVoltage: Voltage divider output.
N* @param[out]   pulPullDownResistor: Pointer to store the pull down resistor.
N* @return       Success or library error message.
N**/
NeMpbError_t eMpbMathResistorVoltageDividerGetPullDownResistor( uint32_t ulPullUpResistor, uint32_t ulInputVoltage, uint32_t ulOutputVoltage, uint32_t *pulPullDownResistor );
N
N/**
N* @brief        Calculate the output voltage of a voltage divider.
N* @param[in]    ulPullUpResistor: Resistor at voltage divider input.
N* @param[in]    ulPullDownResistor: Resistance at voltage divider output.
N* @param[in]    xInputVoltage: Voltage divider input.
N* @param[out]   pxOutputVoltage: Pointer to store the voltage divider output.
N* @return       Success or library error message.
N* @note         Float voltages.
N**/
NeMpbError_t eMpbMathResistorFloatVoltageDividerGetVout( uint32_t ulPullUpResistor, uint32_t ulPullDownResistor, float xInputVoltage, float *pxOutputVoltage );
N
N/**
N* @brief        Calculate the input voltage of a voltage divider.
N* @param[in]    ulPullUpResistor: Resistor at voltage divider input.
N* @param[in]    ulPullDownResistor: Resistance at voltage divider output.
N* @param[in]    xOutputVoltage: Voltage divider output.
N* @param[out]   pxInputVoltage: Pointer to store the voltage divider input.
N* @return       Success or library error message.
N* @note         Float voltages.
N**/
NeMpbError_t eMpbMathResistorFloatVoltageDividerGetVin( uint32_t ulPullUpResistor, uint32_t ulPullDownResistor, float xOutputVoltage, float *pxInputVoltage );
N
N/**
N* @brief        Calculate the pull up resistor of a voltage divider.
N* @param[in]    ulPullDownResistor: Resistance at voltage divider output.
N* @param[in]    xInputVoltage: Voltage divider input.
N* @param[in]    xOutputVoltage: Voltage divider output.
N* @param[out]   pulPullUpResistor: Pointer to store the pull up resistor.
N* @return       Success or library error message.
N* @note         Float voltages.
N**/
NeMpbError_t eMpbMathResistorFloatVoltageDividerGetPullUpResistor( uint32_t ulPullDownResistor, float xInputVoltage, float xOutputVoltage, uint32_t *pulPullUpResistor );
N
N/**
N* @brief        Calculate the pull down resistor of a voltage divider.
N* @param[in]    ulPullUpResistor: Resistor at voltage divider input.
N* @param[in]    xInputVoltage: Voltage divider input.
N* @param[in]    xOutputVoltage: Voltage divider output.
N* @param[out]   pulPullDownResistor: Pointer to store the pull down resistor.
N* @return       Success or library error message.
N* @note         Float voltages.
N**/
NeMpbError_t eMpbMathResistorFloatVoltageDividerGetPullDownResistor( uint32_t ulPullUpResistor, float xInputVoltage, float xOutputVoltage, uint32_t *pulPullDownResistor );
N
N/**
N* @brief          Calculate the equivalent resistor of two resistors in
N*                 parallel.
N* @param[in]      ulResistor1: First resistor.
N* @param[in]      ulResistor2: Second resistor.
N* @param[out]     pulEquivalentResistor: Pointer to store the equivalent
N*                 resistor.
N* @return         Success or library error message.
N**/
NeMpbError_t eMpbMathResistorGetEquivalentInParallel( uint32_t ulResistor1, uint32_t ulResistor2, uint32_t *pulEquivalentResistor );
N
N/**
N* @brief          Calculate one resistor from equivalent resistor
N* @param[in]      ulEquivalentResistor: Equivalent resistor.
N* @param[in]      ulResistor1: first resistor.
N* @param[out]     pulResistor2: Pointer to store the second resistor
N* @return         Success or library error message.
N**/
NeMpbError_t eMpbMathResistorGetResistorInParallel( uint32_t ulEquivalentResistor, uint32_t ulResistor1, uint32_t *pulResistor2 );
N
N/**
N* @brief          Calculate one resistor from equivalent resistor
N* @param[in]      ulEquivalentResistor: Equivalent resistor.
N* @param[in]      ulResistor1: first resistor.
N* @param[out]     pulresistor3: Pointer to store the third resistor
N* @return         Success or library error message.
N**/
NeMpbError_t eMpbMathResistorGetResistorNortonEquivalent( uint16_t usVoltageReaded, uint16_t usVoltageReference, uint32_t ulResistor1, uint32_t *pulThermistance );
N
N#endif /* __MPBMATHRESISTOR_H */
N
L 31 "..\mpbMath\Includes\mpbMath.h" 2
N#include "mpbMathRound.h"
L 1 "..\mpbMath\Includes\mpbMathRound.h" 1
N/**
N  * @file			  mpbMathRound.h
N  * @brief			Library to calculate the rounding of a value
N  * @author			juan nandres 
N  * @date			Created on 2021-3-5
N  * @note
N* @copyright mpb, Montreal, Qc
N* <h2><center>&copy; COPYRIGHT 2021 MPB, Montreal, Quebec, Canada</center></h2>
N* <h2><center>&copy; All rights reserved.</center></h2><br/><br/>
N* <center>This document contains confidential and proprietary information
N* of MPB (subject to a non-disclosure agreement) and shall</center>
N* <center>not be disclosed, distributed, or reproduced in whole or in
N* part, without the prior written authorization of MPB.</center>
N**/
N
N/* Header guard ------------------------------------------------------------- */
N#ifndef __MPBMATHROUND_H
N#define __MPBMATHROUND_H
N/* Includes ----------------------------------------------------------------- */
N#include "mpblibs.h"
N/* Define ------------------------------------------------------------------- */
N/* Exported macro ----------------------------------------------------------- */
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N
N
N
N/**
N  * @brief          Round the value to the specified precision
N  * @param[in,out]  fValue: Pointer to value to round
N  * @param[in]      ullPrecision: Precision of the rounding (10, 100, etc)
N  * @return         Success or library error message
N  * @note           float
N  **/
NeMpbError_t eNepMathRoundToPrecisionFloat(float *fValue, uint64_t ullPrecision );
N
N#endif /* __NEPMATHROUND_H */
L 32 "..\mpbMath\Includes\mpbMath.h" 2
N
N
N/* Define ------------------------------------------------------------------- */
N#define xMpbMathPI_IN_DEGREES               ( 180.0f )
N#define xMpbMathRADIANS_TO_DEGREES          ( 57.29578f )
N#define xMpbMathMS_TO_SECONDS               ( 1000.0f )
N#define xMpbMathROTATION_IN_DEGREES         ( 360.0f  )
N
N/* Exported macro ----------------------------------------------------------- */
N#define xMpbMathBIT( x )                                    ( 1 << ( x ) )
N#define xMpbMathSETBITS( x, y )                             ( ( x ) |= ( y ) )
N#define xMpbMathCLEARBITS( x, y )                           ( ( x ) &= ( ~ ( y ) ) )
N#define xMpbMathSETBIT( x, y )                              xMpbMathSETBITS( ( x ), ( xMpbMathBIT( ( y ) ) ) )
N#define xMpbMathCLEARBIT( x, y )                            xMpbMathCLEARBITS( ( x ), ( xMpbMathBIT( ( y ) ) ) )
N#define xMpbMathBITSET( x, y )                              ( ( x ) & ( xMpbMathBIT( y ) ) )
N#define xMpbMathBITCLEAR( x, y )                            !xMpbMathBITSET( ( x ), ( y ) )
N#define xMpbMathBITSSET( x, y )                             ( ( ( x ) & ( y ) ) == ( y ) )
N#define xMpbMathBITSCLEAR( x, y )                           ( ( ( x ) & ( y ) ) == 0 )
N#define xMpbMathBITVAL( x, y )                              ( ( ( x )>>( y ) ) & 1 )
N#define usMpbMathCONCAT_BYTES( msb, lsb )                   ( ( ( uint16_t )msb << 8 ) | ( uint16_t )lsb )
N#define ulMpbMathCONCAT_BYTES( mmsb, mlsb, lmsb, llsb )     ( ( ( uint32_t )mmsb << 24 ) | ( ( uint32_t )mlsb << 16 ) | ( ( uint32_t )lmsb << 8 ) | ( ( uint32_t )llsb ) )
N
N#define xMpbMathTable_Length( table )                       ( sizeof( table ) / sizeof( table[ 0 ] ) )
N
N/* Exported enum ------------------------------------------------------------ */
N/* Exported struct ---------------------------------------------------------- */
N/* Global variables --------------------------------------------------------- */
N/* Exported function prototypes --------------------------------------------- */
N/**
N  * @brief      Check if the float value is NaN
N  * @param[in]  xValue: Float value to check
N  * @return     eTrue if the value is NaN, eFalse otherwise
N  **/
Nextern eBool_t eMpbMathFloatIsNaN( float xValue );
N
N/**
N  * @brief      Check if the float value is infinite
N  * @param[in]  xValue: Float value to check
N  * @return     eTrue if the value is infinite, eFalse otherwise
N  **/
Nextern eBool_t eMpbMathFloatIsInfinity( float xValue );
N
N/**
N  * @brief      Check if the double value is NaN
N  * @param[in]  xValue: Double value to check
N  * @return     eTrue if the value is NaN, eFalse otherwise
N  **/
Nextern eBool_t eMpbMathDoubleIsNaN( double xValue );
N
N/**
N  * @brief      Check if the double value is infinite
N  * @param[in]  xValue: Double value to check
N  * @return     eTrue if the value is infinite, eFalse otherwise
N  **/
Nextern eBool_t eMpbMathDoubleIsInfinity( double xValue );
N
N#endif /* __MPBMATH_H */
L 19 "Thermistor\Sources\thermistorCircuitUtil.c" 2
N/* Private define ----------------------------------------------------------- */
N/* Private macro ------------------------------------------------------------ */
N/* Private enum ------------------------------------------------------------- */
N/* Private struct ----------------------------------------------------------- */
N/* Private variables -------------------------------------------------------- */
N/* External variables ------------------------------------------------------- */
N/* Private function prototypes ---------------------------------------------- */
N/* Private functions -------------------------------------------------------- */
N/* Exported functions ------------------------------------------------------- */
N
NeMpbError_t eThermistorCircuitUtilGetThermistanceValue( handle_t xStream, xThermistorCircuitConfig_t xThermistorCircuitConfig, uint32_t *pulThermistance )
N{
N	eMpbError_t eMpbError;
N	uint16_t 	usVoltage;
N		
N  /* Validate parameter */
N  vMpblibsAssertParam( pulThermistance );
X  ;
N		
N	/* Get thermistor voltage */
N	eMpbError = eThermistorAnalogReadmV( xStream, &usVoltage );
N	if( eMpbError != eSuccess )
N	{
N		return eMpbError;
N	}
N	
N	/* calculate the thermistance via de Norton equivalent */
N	
N	eMpbMathDivisionU32( ( usVoltage * xThermistorCircuitConfig.ulSeriesResistor1 ), ( xThermistorCircuitConfig.usReferenceVoltagemV - usVoltage ), pulThermistance );
N	
N	if( eMpbError != eSuccess )
N	{
N		return eMpbError;
N	}
N	
N	return eMpbError;
N}
N
N/*----------------------------------------------------------------------------*/
N
