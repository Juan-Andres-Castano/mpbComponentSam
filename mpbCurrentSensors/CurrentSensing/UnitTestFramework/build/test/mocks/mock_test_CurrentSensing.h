/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TEST_CURRENTSENSING_H
#define _MOCK_TEST_CURRENTSENSING_H

#include "test_CurrentSensing.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_test_CurrentSensing_Init(void);
void mock_test_CurrentSensing_Destroy(void);
void mock_test_CurrentSensing_Verify(void);




#define eCurrentSensingAnalogReadmV_IgnoreAndReturn(cmock_retval) eCurrentSensingAnalogReadmV_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eCurrentSensingAnalogReadmV_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensingAnalogReadmV_ExpectAnyArgsAndReturn(cmock_retval) eCurrentSensingAnalogReadmV_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eCurrentSensingAnalogReadmV_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensingAnalogReadmV_ExpectAndReturn(xStream, pxVoltage, cmock_retval) eCurrentSensingAnalogReadmV_CMockExpectAndReturn(__LINE__, xStream, pxVoltage, cmock_retval)
void eCurrentSensingAnalogReadmV_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, float* pxVoltage, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eCurrentSensingAnalogReadmV_CALLBACK)(handle_t xStream, float* pxVoltage, int cmock_num_calls);
void eCurrentSensingAnalogReadmV_StubWithCallback(CMOCK_eCurrentSensingAnalogReadmV_CALLBACK Callback);
#define eCurrentSensingAnalogReadmV_ExpectWithArrayAndReturn(xStream, pxVoltage, pxVoltage_Depth, cmock_retval) eCurrentSensingAnalogReadmV_CMockExpectWithArrayAndReturn(__LINE__, xStream, pxVoltage, pxVoltage_Depth, cmock_retval)
void eCurrentSensingAnalogReadmV_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, float* pxVoltage, int pxVoltage_Depth, eMpbError_t cmock_to_return);
#define eCurrentSensingAnalogReadmV_ReturnThruPtr_pxVoltage(pxVoltage) eCurrentSensingAnalogReadmV_CMockReturnMemThruPtr_pxVoltage(__LINE__, pxVoltage, sizeof(*pxVoltage))
#define eCurrentSensingAnalogReadmV_ReturnArrayThruPtr_pxVoltage(pxVoltage, cmock_len) eCurrentSensingAnalogReadmV_CMockReturnMemThruPtr_pxVoltage(__LINE__, pxVoltage, (int)(cmock_len * (int)sizeof(*pxVoltage)))
#define eCurrentSensingAnalogReadmV_ReturnMemThruPtr_pxVoltage(pxVoltage, cmock_size) eCurrentSensingAnalogReadmV_CMockReturnMemThruPtr_pxVoltage(__LINE__, pxVoltage, cmock_size)
void eCurrentSensingAnalogReadmV_CMockReturnMemThruPtr_pxVoltage(UNITY_LINE_TYPE cmock_line, float* pxVoltage, int cmock_size);
#define eCurrentSensingAnalogReadmV_IgnoreArg_xStream() eCurrentSensingAnalogReadmV_CMockIgnoreArg_xStream(__LINE__)
void eCurrentSensingAnalogReadmV_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensingAnalogReadmV_IgnoreArg_pxVoltage() eCurrentSensingAnalogReadmV_CMockIgnoreArg_pxVoltage(__LINE__)
void eCurrentSensingAnalogReadmV_CMockIgnoreArg_pxVoltage(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
