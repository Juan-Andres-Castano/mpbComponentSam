/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MPBMATHAVERAGE_H
#define _MOCK_MPBMATHAVERAGE_H

#include "mpbMathAverage.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_mpbMathAverage_Init(void);
void mock_mpbMathAverage_Destroy(void);
void mock_mpbMathAverage_Verify(void);




#define eMpbMathAverageS32_IgnoreAndReturn(cmock_retval) eMpbMathAverageS32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbMathAverageS32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbMathAverageS32_ExpectAnyArgsAndReturn(cmock_retval) eMpbMathAverageS32_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbMathAverageS32_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbMathAverageS32_ExpectAndReturn(pslArray, usLength, pslResult, cmock_retval) eMpbMathAverageS32_CMockExpectAndReturn(__LINE__, pslArray, usLength, pslResult, cmock_retval)
void eMpbMathAverageS32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const int32_t* pslArray, uint16_t usLength, int32_t* pslResult, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbMathAverageS32_CALLBACK)(const int32_t* pslArray, uint16_t usLength, int32_t* pslResult, int cmock_num_calls);
void eMpbMathAverageS32_StubWithCallback(CMOCK_eMpbMathAverageS32_CALLBACK Callback);
#define eMpbMathAverageS32_ExpectWithArrayAndReturn(pslArray, pslArray_Depth, usLength, pslResult, pslResult_Depth, cmock_retval) eMpbMathAverageS32_CMockExpectWithArrayAndReturn(__LINE__, pslArray, pslArray_Depth, usLength, pslResult, pslResult_Depth, cmock_retval)
void eMpbMathAverageS32_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const int32_t* pslArray, int pslArray_Depth, uint16_t usLength, int32_t* pslResult, int pslResult_Depth, eMpbError_t cmock_to_return);
#define eMpbMathAverageS32_ReturnThruPtr_pslResult(pslResult) eMpbMathAverageS32_CMockReturnMemThruPtr_pslResult(__LINE__, pslResult, sizeof(*pslResult))
#define eMpbMathAverageS32_ReturnArrayThruPtr_pslResult(pslResult, cmock_len) eMpbMathAverageS32_CMockReturnMemThruPtr_pslResult(__LINE__, pslResult, (int)(cmock_len * (int)sizeof(*pslResult)))
#define eMpbMathAverageS32_ReturnMemThruPtr_pslResult(pslResult, cmock_size) eMpbMathAverageS32_CMockReturnMemThruPtr_pslResult(__LINE__, pslResult, cmock_size)
void eMpbMathAverageS32_CMockReturnMemThruPtr_pslResult(UNITY_LINE_TYPE cmock_line, int32_t* pslResult, int cmock_size);
#define eMpbMathAverageS32_IgnoreArg_pslArray() eMpbMathAverageS32_CMockIgnoreArg_pslArray(__LINE__)
void eMpbMathAverageS32_CMockIgnoreArg_pslArray(UNITY_LINE_TYPE cmock_line);
#define eMpbMathAverageS32_IgnoreArg_usLength() eMpbMathAverageS32_CMockIgnoreArg_usLength(__LINE__)
void eMpbMathAverageS32_CMockIgnoreArg_usLength(UNITY_LINE_TYPE cmock_line);
#define eMpbMathAverageS32_IgnoreArg_pslResult() eMpbMathAverageS32_CMockIgnoreArg_pslResult(__LINE__)
void eMpbMathAverageS32_CMockIgnoreArg_pslResult(UNITY_LINE_TYPE cmock_line);
#define eMpbMathAverageFloat_IgnoreAndReturn(cmock_retval) eMpbMathAverageFloat_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eMpbMathAverageFloat_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbMathAverageFloat_ExpectAnyArgsAndReturn(cmock_retval) eMpbMathAverageFloat_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eMpbMathAverageFloat_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eMpbMathAverageFloat_ExpectAndReturn(pxArray, usLength, pxResult, cmock_retval) eMpbMathAverageFloat_CMockExpectAndReturn(__LINE__, pxArray, usLength, pxResult, cmock_retval)
void eMpbMathAverageFloat_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const float* pxArray, uint16_t usLength, float* pxResult, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eMpbMathAverageFloat_CALLBACK)(const float* pxArray, uint16_t usLength, float* pxResult, int cmock_num_calls);
void eMpbMathAverageFloat_StubWithCallback(CMOCK_eMpbMathAverageFloat_CALLBACK Callback);
#define eMpbMathAverageFloat_ExpectWithArrayAndReturn(pxArray, pxArray_Depth, usLength, pxResult, pxResult_Depth, cmock_retval) eMpbMathAverageFloat_CMockExpectWithArrayAndReturn(__LINE__, pxArray, pxArray_Depth, usLength, pxResult, pxResult_Depth, cmock_retval)
void eMpbMathAverageFloat_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const float* pxArray, int pxArray_Depth, uint16_t usLength, float* pxResult, int pxResult_Depth, eMpbError_t cmock_to_return);
#define eMpbMathAverageFloat_ReturnThruPtr_pxResult(pxResult) eMpbMathAverageFloat_CMockReturnMemThruPtr_pxResult(__LINE__, pxResult, sizeof(*pxResult))
#define eMpbMathAverageFloat_ReturnArrayThruPtr_pxResult(pxResult, cmock_len) eMpbMathAverageFloat_CMockReturnMemThruPtr_pxResult(__LINE__, pxResult, (int)(cmock_len * (int)sizeof(*pxResult)))
#define eMpbMathAverageFloat_ReturnMemThruPtr_pxResult(pxResult, cmock_size) eMpbMathAverageFloat_CMockReturnMemThruPtr_pxResult(__LINE__, pxResult, cmock_size)
void eMpbMathAverageFloat_CMockReturnMemThruPtr_pxResult(UNITY_LINE_TYPE cmock_line, float* pxResult, int cmock_size);
#define eMpbMathAverageFloat_IgnoreArg_pxArray() eMpbMathAverageFloat_CMockIgnoreArg_pxArray(__LINE__)
void eMpbMathAverageFloat_CMockIgnoreArg_pxArray(UNITY_LINE_TYPE cmock_line);
#define eMpbMathAverageFloat_IgnoreArg_usLength() eMpbMathAverageFloat_CMockIgnoreArg_usLength(__LINE__)
void eMpbMathAverageFloat_CMockIgnoreArg_usLength(UNITY_LINE_TYPE cmock_line);
#define eMpbMathAverageFloat_IgnoreArg_pxResult() eMpbMathAverageFloat_CMockIgnoreArg_pxResult(__LINE__)
void eMpbMathAverageFloat_CMockIgnoreArg_pxResult(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
